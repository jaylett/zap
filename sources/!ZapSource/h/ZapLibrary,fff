; >E-Library
;
; Defines the variables needed for writing Zap extension modes.
; Call the procedure define_zap_variables to set variables up.
; The procedure defines
;   f_*           The file block variables (see E-File)
;   w_*           The window block variables (see E-Windows)
;   c_*           The cursor block variables (see E-Cursors)
;   e_*           The entry point variables (see E-Entry)
;   r_*           The redraw block variables (see Redraw)
;   Zap_*         The zap routines (see E-ZapCalls)
;
; Procedure names local to this library are
;  set_up_file_blk_vars
;  set_up_wind_blk_vars
;  set_up_cusr_blk_vars
;  set_up_entry_vars

                    ^ 0

f_ptr               # 4         ; pointer to file buffer / -1
f_bufl              # 4         ; length of file buffer
f_len               # 4         ; length of file
f_name              # 4         ; pointer to filename
f_load              # 4         ; load address of file
f_exec              # 4         ; exec address of file
f_flags             # 4         ; file flags
f_uptr              # 4         ; pointer to undo buffer
f_ubufl             # 4         ; length of undo buffer
f_ulen              # 4         ; length of data in undo buffer
f_undo              # 4         ; offset of main undo pointer
f_undop             # 4         ; offset of undo block sub-pointer
f_blklen            # 4         ; total length of file block + undo
f_splito            # 4         ; offset in file of start of split
f_splite            # 4         ; offset in buf of end of split
f_splits            # 4         ; size  of split=splite-splito
f_mptr              # 4         ; pointer to marker buffer
f_mbufl             # 4         ; length of marker buffer
f_mlen              # 4         ; length of data in marker buffer
f_mark              # 4         ; current offset in marker buffer
f_docom             # 4         ; current command being 'done'.
f_source            # 4         ; word for use of f_cmode mode
f_dolen             # 4         ; length of insertion/deletion
f_dodata            # 4         ; data to be inserted/replace with.
f_altered           # 4         ; first altered offset in file /-1
f_shiftable         # 4         ; first shiftable offset in file /-1
f_change            # 4         ; signed change of shiftable offset
f_depth             # 4         ; multiple operation depth / 0
f_links             # 4         ; v links to other files
f_cmode             # 4         ; mode which 'owns' file / -1
f_attr              # 4         ; file attributes
f_chklen            # 4         ; initial length
f_chksum            # 4         ; initial checksum
f_oflags            # 4         ; old flags (used by startop/stopop)
f_proposed_name     # 4         ; proposed filename (used by save_to_file)
f_end_mark          # 4         ; end of list marker


                    ^ 0

w_handle            # 4         ; window handle / -1 if deleted
w_minx              # 4         ; min scn x
w_miny              # 4         ; min scn y
w_maxx              # 4         ; max scn x
w_maxy              # 4         ; max scn y
w_scrollx           # 4         ; x scroll
w_scrolly           # 4         ; y scroll
w_infront           # 4         ; window handle of window in front
w_windowflags       # 4         ; wimp window flags
w_file              # 4         ; offset of file showing
w_format            # 4         ; display format
w_width             # 4         ; width of work area in chars
w_height            # 4         ; height of work area in chars
w_txt               # 4         ; pointer to cached text buffer
w_txth              # 4         ; height of cached txt buf in lines
w_txtw              # 4         ; char width of cached line (mult 8)
w_txtn              # 4         ; number of lines cached
w_coff              # 4         ; off in text of first cached line
w_cline             # 4         ; line number of first cached line
w_clogl             # 4         ; log line num of first cached line
w_tab               # 4         ; coltab width
w_tabc              # 4         ; actual tab character code (x4)
w_cr                # 4         ; code of return/line feed
w_flags             # 4         ; (my) window flags
w_title             # 4         ; pointer to window title buffer
w_bpl               # 4         ; bytes per line / width of text
w_margin            # 4         ; width of margin (inc line nos)
w_rl                # 4         ; height in lines of each character
w_rw                # 4         ; width in pixels of each character
w_rh                # 4         ; text height in pixels (no spacing)
w_addr              # 4         ; address of first byte in display
w_stline            # 4         ; line number of first line in disp
w_titlelen          # 4         ; title length (excluding 0)
w_titbuf            # 4         ; address of title showing buffer
w_titlen            # 4         ; length of title showing string
w_mwidth            # 4         ; user required margin width
w_tabchar           # 4         ; user required tab char code (x4)
w_linesp            # 4         ; user required line spacing
w_savedo            # 4         ; fixed off / fixed line off before
w_savedl            # 4         ; pixs from top / phy line of off
w_savedc            # 4         ; change in phy line for shiftable
w_savedh            # 4         ; w_height at multiop start
w_savedlc           # 4         ; phy line of fixed for one op
w_wrapwidth         # 4         ; wordwrap width
w_togminx           # 4         ; toggle size min x
w_togminy           # 4         ; toggle size min y
w_togmaxx           # 4         ; toggle size max x
w_togmaxy           # 4         ; toggle size max y
w_txtlen            # 4         ; size of cache line inc col masks
w_palette           # 4         ; current palette data
w_pwind             # 4         ; point (=this!) window offset
w_pline             # 4         ; point row (y coord)
w_pcol              # 4         ; point column (x coord)
w_poff              # 4         ; point offset
w_ploff             # 4         ; point line offset
w_pwidth            # 4         ; point width
w_saveds            # 4         ; start of area to redraw offset
w_modedata          # 4         ; zap handled mode data block
w_basemap           # 1         ; base keymap number
w_currentmap        # 1         ; current keymap number
w_helpmap           # 1         ; previous keymap number (for HELPKEY)
w_defaultmap        # 1         ; default keymap number
w_font              # 4         ; font block pointer
w_savedscy          # 4         ; saved scrolly (s_txt_stat) ; (was RW 12)
w_info              # 4         ; w_info (was RW13)
w_res14             # 4         ; font cache offset / -1 if none
w_res15             # 4         ; font offset (of 1bpp form)
w_res16             # 4         ; reserved word 16
w_mode0             # 4         ; mode 0 word
w_mode1             # 4         ; mode 1 word
w_mode2             # 4
w_mode3             # 4
w_mode4             # 4
w_mode5             # 4
w_mode6             # 4
w_mode7             # 4
w_mode8             # 4
w_mode9             # 4
w_mode10            # 4
w_mode11            # 4
w_mode12            # 4
w_mode13            # 4
w_mode14            # 4
w_mode15            # 4
w_mode16            # 4
w_mode17            # 4
w_mode18            # 4
w_mode19            # 4
w_mode20            # 4
w_mode21            # 4
w_mode22            # 4
w_mode23            # 4
w_mode24            # 4
w_mode25            # 4
w_mode26            # 4
w_mode27            # 4
w_mode28            # 4
w_mode29            # 4
w_mode30            # 4
w_mode31            # 4
w_end_mark          # 4         ; end of list marker


                    ^ 0

c_wind              # 4         ; offset of window with this caret
c_line              # 4         ; line of caret in work area
c_col               # 4         ; column of caret in work area
c_off               # 4         ; offset of caret in text
c_loff              # 4         ; start of line offset
c_width             # 4         ; width of cursor in chars
c_owind             # 4         ; old window / -1 if none
c_oline             # 4         ; old plotted line
c_ocol              # 4         ; old plotted col
c_owidth            # 4         ; old width / offset for selected regions
c_charoff           # 4         ; offset within character
cusr_blk            # 4         ; length of a cursor block


                    ^ 0

e_module            # 4         ; table offset from module start
e_title             # 4         ; title offset (max 10)
e_author            # 4         ; author offset
e_basemode          # 4         ; mode to call for 0 offsets
e_mode              # 4         ; mode you would like to be
e_init              # 4         ; startup code
e_menu              # 4         ; extension menu
e_len               # 4         ; length of this table
e_postload          # 4         ; called after being loaded/created
e_presave           # 4         ; called before being saved
e_loading           # 4         ; file being loaded/created
e_start             # 4         ; window entering this mode
e_end               # 4         ; window leaving this mode
e_width             # 4         ; find work area width
e_linecol           # 4         ; column offset to file offset
e_lineoff           # 4         ; file offset to column offset
e_clnlog            # 4         ; log to file off
e_clnphy            # 4         ; phy to file off
e_clnoff            # 4         ; file off to phy/log
e_nextline          # 4         ; find next line which can be shifted down
e_minus             # 4         ; perform cursor left
e_plus              # 4         ; perform cursor right
e_sminus            # 4         ; perform shift left
e_splus             # 4         ; perform shift right
e_cminus            # 4         ; perform ctrl minus
e_cplus             # 4         ; perform ctrl plus
e_redrawline        # 4         ; redraw a line of the display
e_redrawlnum        # 4         ; find logical line number
e_char              # 4         ; insert characters as if typed
e_delete            # 4         ; delete characters from text
e_tab               # 4         ; tab key pressed
e_return            # 4         ; return key pressed
e_renumber          # 4         ; please renumber
e_saveandrun        # 4         ; save file and run/compile
e_linestart         # 4         ; find start of line
e_lineend           # 4         ; find end of line
e_linenext          # 4         ; find actual end of line
e_lineprev          # 4         ; find actual start of line
e_copy              # 4         ; copy key data
e_joinline          # 4         ; join this line with the next
e_splitline         # 4         ; split this line at the cursor
e_aligncaret        # 4         ; put caret in sensible posn before command
e_command           # 4         ; someone wants to alter the text
e_compile           # 4         ; compile / run and don't exit
e_formattext        # 4         ; format the text from this point
e_run               # 4         ; run the program being edited
e_runandquit        # 4         ; as above but then quits
e_basic             # 4         ; drops into basic (or language)
e_search            # 4         ; called before a search
e_replace           # 4         ; replace a string
e_selection         # 4         ; start/end a selection
e_click             # 4         ; double/treble click etc
e_message           # 4         ; unrecognised wimp messages
e_setwidth          # 4         ; changing window width
e_listfns           # 4         ; provide list of functions
e_prevline          # 4         ; find start of update region
e_openwindow        # 4         ; window changing size or moving
e_interrogate       # 4         ; Information request from Zap
e_returnword        # 4         ; return bounds of word at cursor
e_help              # 4         ; return possible help keywords


                    ^ 0

Zap_AddMode         # 4         ; add new mode to zap
Zap_Claim           # 4         ; claim heap block
Zap_Ensure          # 4         ; ensure heap block
Zap_Free            # 4         ; free heap block
Zap_MoveBytes       # 4         ; move data
Zap_SplitBuffer     # 4         ; split text buffer at given point
Zap_NewTxtStatus    # 4         ; refresh screen after file changed
Zap_SaveTxtStatus   # 4         ; save info before file changed
Zap_Command         # 4         ; execute insert/delete command
Zap_NewWinStatus    # 4         ; recreate window after change
Zap_SaveWinStatus   # 4         ; save window status before change
Zap_ReplaceArea     # 4         ; replace one string by another
Zap_PlotCaret       # 4         ; plot caret at given position
Zap_ReflectCaret    # 4         ; plot caret at posn only using c_off
Zap_SetCaret        # 4         ; draw caret
Zap_ClearCaret      # 4         ; draw old caret position (remove caret)
Zap_DoCommand       # 4         ; perform the command
Zap_ShowCursor      # 4         ; make sure given cursor is visible
Zap_ReadVar         # 4         ; read a zap variable
Zap_WriteVar        # 4         ; write a zap variable
Zap_SaveFile        # 4         ; save a file to disc
Zap_FillWords       # 4         ; fill a given area of memory
Zap_UpdateLns       # 4         ; update line numbers column
Zap_EachWindow      # 4         ; call sub for each window on file
Zap_UpdateCaret     # 4         ; updates caret posn from offset
Zap_GetWindState    # 4         ; update R8 block with wind posn
Zap_StartOp         # 4         ; start multiop
Zap_StopOp          # 4         ; stop multiop
Zap_CallMode        # 4         ; call a mode entry point using R8
Zap_CallGivenMode   # 4         ; call mode in R10
Zap_ReadMode        # 4         ; read info on a mode
Zap_FindFile        # 4         ; find window on a given file name
Zap_FindWindow      # 4         ; find window on a loaded file
Zap_ConvWindOff     # 4         ; convert window off to blk ptr
Zap_ConvFileOff     # 4         ; convert file off to blk ptr
Zap_GetWindOff      # 4         ; convert window blk ptr to off
Zap_GetFileOff      # 4         ; convert file blk ptr to off
Zap_GotoOffset      # 4         ; move cursor to given posn + mark
Zap_JumptoOffset    # 4         ; move cursor to given posn nomark
Zap_FindOffset      # 4         ; find file offset from x,y coord
Zap_NewFileTitle    # 4         ; update titlebars on a file
Zap_InsertString    # 4         ; insert string into file
Zap_CreateFile      # 4         ; create an empty file
Zap_NewLinkEntry    # 4         ; add an entry to the links table
Zap_DefaultClick    # 4         ; default mouse click handling
Zap_PutCaret        # 4         ; put new caret in file
Zap_DiscardFile     # 4         ; kill file
Zap_DeleteFile      # 4         ; propmt then kill
Zap_DiscardWindow   # 4         ; kill window
Zap_DeleteWindow    # 4         ; prompt then kill window
Zap_BuildMenu       # 4         ; create a variable length menu
Zap_ClearSel        # 4         ; clear selected area
Zap_CreateFileBlk   # 4         ; create a new file block in R9
Zap_CreateWindBlk   # 4         ; create a new window block in R8
Zap_GetSel          # 4         ; get info on selected region
Zap_InsertMark      # 4         ; insert marker at given offset
Zap_InstallFile     # 4         ; load a file into Zap
Zap_NewMode         # 4         ; change mode of a file
Zap_NewTitle        # 4         ; update the title of a window
Zap_CallBaseMode    # 4         ; call base mode entry point
Zap_NewView         # 4         ; open a new window on a file
Zap_ReadSel         # 4         ; read the selected region
Zap_Replace         # 4         ; perform a search and replace
Zap_Search          # 4         ; perform a file search
Zap_Select          # 4         ; select a region
Zap_AlterSel        # 4         ; alter selected region
Zap_OffLineCol      # 4         ; convert file offset to X,Y
Zap_AddCommands     # 4         ; add a command table
Zap_MiniWrite       # 4         ; insert chars in minibuffer
Zap_MiniPrompt      # 4         ; set/change the minibuffer prompt
Zap_MiniUpdate      # 4         ; update minibuffer on screen
Zap_AddYankRegion   # 4         ; add a region to kill ring
Zap_FindCommand     # 4         ; convert command name to address
Zap_ProcessCommand  # 4         ; call a Zap command
Zap_FindKeyEntry    # 4         ; read a keymap entry
Zap_FindLeafName    # 4         ; find leaf part of a filename
Zap_NewFileName     # 4         ; change the name of a file
Zap_CheckFileName   # 4         ; see if file contains a path
Zap_GetCurrDir      # 4         ; find the current directory name
Zap_MiniWriteC      # 4         ; write a character to minibuffer
Zap_MiniClear       # 4         ; clear minibuffer
Zap_MiniStart       # 4         ; start up a new minibuffer
Zap_MiniEval        # 4         ; turn string into number
Zap_CommandString   # 4         ; execute a string command
Zap_ProcessKeys     # 4         ; process a list of keys
Zap_ProcessAKey     # 4         ; process a single key as if typed
Zap_OpenWindow      # 4         ; open a Zap window
Zap_RestoreModeWord # 4         ; restore mode options on e_start
Zap_SaveModeWord    # 4         ; save mode options on e_end
Zap_GetModeWord     # 4         ; read the mode word
Zap_PutModeWord     # 4         ; write the mode word
Zap_BaseMode        # 4         ; call the base mode
Zap_ReadWord        # 4         ; read a word from the file buffer
Zap_ReplaceWord     # 4         ; replace a word in the file buffer
Zap_ModeColour      # 4         ; Read colour definitions
Zap_FindInput       # 4         ; Find input position
Zap_ClipCache       # 4         ; Move the cache reference point.
Zap_ModeData        # 4         ; Read/write Zap data mode words.
Zap_WhichMode       # 4         ; Which mode to load a file into.
Zap_ModeNumber      # 4         ; Convert mode name to number.
Zap_SendDataSave    # 4         ; Initiate data transfer protocol.
Zap_Warning         # 4         ; Show warning message.
Zap_AllWindow       # 4         ; Examine each window in turn.
Zap_ReadMenu        # 4         ; Create text menu to data.
Zap_LoadMenu        # 4         ; Load a text menu file.
Zap_OpenMenu        # 4         ; Open a menu on the screen.
Zap_CallBack        # 4         ; Call back at given time.
Zap_DragBox         # 4         ; Perform your own drag box.
Zap_SendMessage     # 4         ; Send a message via Zap.
Zap_Reply           # 4         ; Reply to a message via Zap.
Zap_Extend          # 4         ; Extend a heap block.
Zap_ModeColourNum   # 4         ; Change size of palette.
Zap_CreateThrowback # 4         ; Create a throwback file.
Zap_Throwback       # 4         ; Insert a throwback line.
Zap_TestModeName    # 4         ; Find if a mode is loaded.
Zap_UpdateArea      # 4         ; Force window redraw
Zap_UpdateWindow    # 4         ; Force window redraw
Zap_UpdateWholeWindow # 4       ; Force window redraw
Zap_AllFiles        # 4         ; Force window redraw
Zap_ReadValidateCommand # 4     ; String -> command block
Zap_ProcessKeyCommand # 4       ; Execute a given command block
Zap_ReturnWord      # 4         ; Return delimited word at cursor
Zap_DoReplaceArea   # 4         ; Calls Zap_ReplaceArea with R8=0
Zap_LogicalLine     # 4         ; Calls base mode's e_clnlog
Zap_PhysicalLine    # 4         ; Calls base mode's e_clnphy
Zap_OffsetLine      # 4         ; Calls base mode's e_clnoff
Zap_NextLine        # 4         ; Calls base mode's e_nextline
Zap_EvaluateExpression # 4      ; Calls base mode's e_nextline
Zap_ClaimMessage    # 4         ; Claim/forward the next message
Zap_TestChanged     # 4         ; Tests to see if file modified
Zap_MarkChanged     # 4         ; Marks the file changed/unchanged
Zap_CalculateChecksum # 4       ; Calculates the file's chksum
Zap_LookupToken     # 4         ; Looks up token in Zap's messages file
Zap_LookupTokenGS   # 4         ; ...with GS translation (OS_GStrans)
Zap_LookupError     # 4         ; ...for error generation
Zap_LookupTokenR0   # 4         ; LookupToken with R2=R3=0
Zap_ExpandMenu      # 4         ; Expands a tokenised menu
Zap_MiniWriteToken  # 4         ; insert chars in minibuffer (ditto)
Zap_MiniPromptToken # 4         ; set/change the minibuffer prompt (ditto)
Zap_TestIfCloneBase # 4		; is given mode the clone base of the current?
Zap_ReadVariable    # 4		; reads a user-controlled configuration variable
Zap_BuildMenuWithHelp # 4
Zap_CharDelDispatch # 4

                    ^ 0

r_flags             # 4         ; Redraw flags
r_minx              # 4         ; min x in pixs inc
r_miny              # 4         ; min y in pixs inc (from top)
r_maxx              # 4         ; max x in pixs exc
r_maxy              # 4         ; max y in pixs exc (from top)
r_screen            # 4         ; address of the screen
r_bpl               # 4         ; bytes per raster line
r_bpp               # 4         ; log base 2 of bpp
r_charw             # 4         ; width of a character in pixs
r_charh             # 4         ; height of a character in pixs
r_caddr             # 4         ; cache address / font name
r_cbpl              # 4         ; bytes per cached line
r_cbpc              # 4         ; bytes per cached character
r_linesp            # 4         ; line spacing in pixels
r_data              # 4         ; address of data to print
r_scrollx           # 4         ; x scroll offset in pixs
r_scrolly           # 4         ; y scroll offset in pixs
r_palette           # 4         ; address of palette data
r_for               # 4         ; start forground colour
r_bac               # 4         ; start background colour
r_workarea          # 4         ; address of work area
r_magx              # 4         ; log 2 of num of x os per pixel
r_magy              # 4         ; log 2 of num of y os per pixel
r_xsize             # 4         ; screen width in pixels
r_ysize             # 4         ; screen height in pixels
r_mode              # 4         ; screen mode

 END
