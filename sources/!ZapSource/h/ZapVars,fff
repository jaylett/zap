; Define the variable names for the workspace of the Zap module
; $Id: ZapVars,fff,v 1.1.2.14 1999/07/06 11:36:00 james Exp $

if_limit	    * 128

		    ^ 0

env_main_entry	    # 4	; address of entry points table  (must be at #0)
env_modstart	    # 4	; address of start of Zap module (must be at #4)
test_0		    # 4 ; test variables
test_1		    # 4
test_2		    # 4
test_3		    # 4
env_start	    # 4 ; address of start of stack (start area)
env_top		    # 4 ; top of free mem (end of wimpslot)
env_string	    # 4 ; startup string address

ext_modes	    # 4 ; v list of external modes (see add_external_object)
ext_comms	    # 4 ; v list of external commands (ditto)
ext_messages	    # 4 ; v list of externally handled wimp messages (ditto)
ext_clones	    # 4 ; v list of (uninitialised) clone modes
ext_comm_flags	    # 4 ; v list of flags words for external commands

heap_start	    # 4 ; start of heap
heap_end	    # 4 ; end of heap

scn_xos		    # 4 ; number of horizontal os coords
scn_yos		    # 4 ; number of vertical os coords
scn_magxold	    # 4 ; before mode change
scn_magyold	    # 4 ; before mode change

red_flags	    # 4 ; redraw block flags - THE REST OF THIS BLOCK FIXED
red_minx	    # 4 ; left of redraw area in pixs
red_miny	    # 4 ; top of redraw area in pixs
red_maxx	    # 4 ; rhs of redraw area in pixs
red_maxy	    # 4 ; bottom of redraw area in pixs
red_screen	    # 4 ; screen address (always 0)
scn_bpl		    # 4 ; bytes per raster line
scn_bpp		    # 4 ; log2 of bits per pixel (0-5)
red_charw	    # 4 ; width of each char in pixels
red_charh	    # 4 ; height of each char in pixels
red_caddr	    # 4 ; address of character bitmaps
red_cbpl	    # 4 ; bytes per cached character line
red_cbpc	    # 4 ; bytes per cached character
red_linesp	    # 4 ; line spacing in pixels
red_data	    # 4 ; v 0 new format text
red_scrollx	    # 4 ; top left scroll x in pixels
red_scrolly	    # 4 ; top left scroll y in pixels
red_palette	    # 4 ; address of conversion palette
red_for		    # 4 ; start foreground colour (1)
red_bac		    # 4 ; start background colour (0)
red_workarea	    # 4 ; v &80 address of work area
scn_magx	    # 4 ; log2 of num of x os per pixel
scn_magy	    # 4 ; log2 of num of y os per pixel
red_xsize	    # 4 ; screen width in pixels
red_ysize	    # 4 ; screen height in pixels
scn_mode	    # 4 ; current screen mode - UP TO HERE

red_datasize	    # 4 ; size of red_data block
red_blkbuf	    # 4 ; v 0 address of blank lines buffer
red_blklen	    # 4 ; length (in bytes) of blank lines buffer

file_list	    # 4 ; v 0 address of list of files
file_num	    # 4 ; number of files in list
file_end	    # 4 ; end address of file buffers
file_area	    # 4 ; handle of files dynamic area

wind_list	    # 4 ; v 0 address of list of windows
wind_num	    # 4 ; number of windows in list
wind_count	    # 4 ; inc when new window opened (0,1,2,3,4)

wimp_task	    # 4 ; wimp task handle of Zap task
wimp_buffer	    # 4 ; f &100 buf for wimp poll return
wimp_iconbar	    # 4 ; iconbar icon handle
wimp_block	    # 4 ; f &100 buf for messages/wind info
wimp_menu	    # 4 ; window off of last opened menu/-2
wimp_menub	    # 4 ; buttons pressed on menu selection
wimp_menuptr	    # 4 ; address of currently open menu
wimp_pollnum	    # 4 ; last poll num (+b31 same previous error)
wimp_kbdbuf	    # 4 ; v &200 keyboard entry buffer
wimp_drag	    # 4 ; wind hand of last dragd obj / -1
wimp_dragdepth	    # 4 ; mode 0 mouse drag depth 0,2,3...
wimp_data	    # 4 ; v &100 data buf for execute_command etc
wimp_flagbits	    # 4 ; b0:selmenu?
wimp_dzap	    # 4 ; f 128 byte dzap buffer
wimp_print	    # 4 ; f 128 byte print buffer
wimp_cacheline	    # 4 ; v 4 buffer for tidied cached line
wimp_throwback	    # 4 ; file offset for output / -1 if none
wimp_timeformat	    # 4 ; v 0 time format string
wimp_dateformat	    # 4 ; v 0 date format string
wimp_mzap	    # 4 ; f 32 mzap buffer
wimp_modelist	    # 4 ; v 0 list of mode start ups (docs at rk_mode)
wimp_bottomgap	    # 4 ; gap at base of file in lines
wimp_leftgap	    # 4 ; gap at left of window in os
wimp_rightgap	    # 4 ; gap at right of window in os
wimp_sizelist	    # 4 ; v 0 list of initial window sizes
wimp_helpdata	    # 4 ; -1/help data file (0 terminated)
wimp_eolstring	    # 4 ; v 0 quick print end of line str
wimp_selecttype	    # 4 ; Newfile string = type created on select
wimp_adjusttype	    # 4 ; Newfile string = type created on adjust
wimp_version	    # 4 ; wimp version number 200,300,350 (Zap$OSVsn)
wimp_indentstring   # 4 ; v 0 indent string
wimp_quitsender	    # 4 ; sender of pre-quit message
wimp_config	    # 4 ; v config file address
;wimp_conlen	    # 4 ; config file length
wimp_loglist	    # 4 ; v 4 address of list of logged wimp blocks
wimp_loglen	    # 4 ; length of logged list (num in list * 16)
wimp_dragsub	    # 4 ; address of sub interested in drag ending
wimp_dragdata	    # 4 ; data for the sub interested in drag ending
wimp_minaw	    # 4 ; minimum auto-width width
wimp_maxaw	    # 4 ; maximum auto-width width
wimp_attr	    # 4 ; default file attributes for newly created files
wimp_sofstring	    # 4 ; v 0 quick print start str
wimp_eofstring	    # 4 ; v 0 quick print end str
wimp_realver	    # 4 ; real WindowManager version number
wimp_limit	    # 4 ; application space upper limit (address)
wimp_backupdelay    # 4 ; delay in seconds between '~' backups.
wimp_clicksend      # 4 ; v 0 list of click-sends (docs at rk_clicksend)
wimp_poll_word	    # 4 ; Wimp_Poll(Idle) R3 points to this


car_mode	    # 4 ; current caret mode (-1 if lost)
car_omode	    # 4 ; old caret mode (before being lost)
car_input	    # 4 ; f address of input caret block
car_cursor	    # 4 ; f address of cursor caret block
car_block	    # 4 ; f 64 byte caret update area block
car_hex		    # 4 ; num of hex digits enterd in hex mode
car_hexold	    # 4 ; temp store for car_hex
car_selection	    # 4 ; f address of selection caret block
car_left	    # 4 ; left cursor indent (chars)
car_right	    # 4 ; right cursor indent (chars)
car_top		    # 4 ; top cursor indent (chars)
car_bottom	    # 4 ; bottom cursor indent (chars)
car_flashon	    # 4 ; on time in cs
car_flashoff	    # 4 ; off time in cs
car_column	    # 4 ; column of caret (temp)

fnd_string	    # 4 ; v 0 address of (default) search string
fnd_string2	    # 4 ; address of search_data string
fnd_replace	    # 4 ; v 0 address of replacement string
fnd_replace2	    # 4 ; v 0 address of substituted replace string
fnd_macros	    # 4 ; f 320 search macro buffer data
fnd_tree	    # 4 ; v 0 search tree
fnd_word	    # 4 ; (find mask / 1 if none) OR word to match
fnd_word2	    # 4 ; second character to match

throw_file	    # 4 ; window offset of throwback file/-1 (temporary)
throw_name	    # 4 ; v 0 temp store for file name

key_learn	    # 4 ; v 0 address of learnt keystrokes
key_llen	    # 4 ; length of valid data in learn buffer
key_off		    # 4 ; v &60 List of search as you type offsets
key_default	    # 4 ; default key map number
key_basemapdef	    # 4 ; basemap number of currently-being-defined keymap
key_currentdef	    # 4 ; currently-being-defined keymap number
key_maplist	    # 4 ; v 0 list of installed keymaps
key_flags	    # 4 ; keys flags word
key_last	    # 4 ; last pressed key
key_lastcom	    # 4 ; last executed command
key_count	    # 4 ; number of times for univ arg
;key_helpmap	    # 4 ; keymap active prior to last KeyMap, BaseMap etc.

mini_ptr	    # 4 ; v address of mini buffer
mini_bufl	    # 4 ; length of mini buffer (exc term)
mini_len	    # 4 ; current text len in mini buffer
mini_off	    # 4 ; cursor offset in buffer <= len
mini_mark	    # 4 ; offset of mark after prompt
mini_command	    # 4 ; minibuffer command / 0 if none
mini_wind	    # 4 ; associated window
mini_openblk	    # 4 ; f 80 block used for opens
mini_lineed	    # 4 ; line editor buffer handle for minibuffer history

yank_ptr	    # 4 ; v 0 address of global kill ring
yank_len	    # 4 ; length of data in kill ring
yank_off	    # 4 ; yank offset in kill ring
yank_file	    # 4 ; file last yanked

menu_struct	    # 4 ; v 0 variable size menu structure
menu_entries	    # 4 ; v 0 variable size menu entries
menu_help	    # 4 ; v 0 variable size menu help text
menu_handles	    # 4	; v 0 num of handles, addresses of menus
menu_count	    # 4	; menu update count, incremented to update
menu_memory	    # 4	; f 16 words - menu memories 0-15
menu_mode	    # 4 ; used by MODELIST and menu building code

tem_list	    # 4 ; v ? list of template index headers
tem_defn	    # 4 ; v ? template definitions
tem_num		    # 4 ; total number of templates
tem_colour	    # 4 ; palette entry of colour box (while dragging)

tmp_formline	    # 4 ; temp word for format_line

clk_depth	    # 4 ; curent number of clicks
clk_time	    # 4 ; monotonic time of last click
clk_xcol	    # 4 ; x col posn of last click
clk_ycol	    # 4 ; y row posn of last click
clk_buttons	    # 4 ; buttons state on last click
clk_wind	    # 4 ; window off of last click

font_start	    # 4 ; start of bitmaps block / dynamic area
font_end	    # 4 ; end of bitmaps block / dynamic area
font_area	    # 4 ; handle of font dynamic area
font_list	    # 4 ; address of font list detailing area contents
font_num	    # 4 ; number of blocks in font_list
font_namelow	    # 4 ; v default font name for lores modes
font_namehigh	    # 4 ; v default font name for hires
font_name	    # 4 ; v default anti-aliased font name
font_size	    # 4 ; default anti-aliased font size in points
font_struct	    # 4 ; v 0 font menu structure
font_entries	    # 4 ; v 0 font menu entries buffer
font_help	    # 4 ; v 0 font menu help buffer
font_ssstruct	    # 4 ; v 0 font sub-style menu structure
font_ssentries	    # 4 ; v 0 font sub-style menu entries buffer
font_sshelp	    # 4 ; v 0 font sub-style menu help buffer
font_outlinelist    # 4 ; v 0 font outline menu structure/entries buffer

font_charw	    # 4 ; font width in pixs
font_charh	    # 4 ; font height in pixs
font_cache	    # 4 ; 0 not used/-1 VDU/cache address
font_cinit	    # 4 ; v 0 initial font cache
font_cmain	    # 4 ; v 0 main (expanded) cache
font_cachedto	    # 4 ; char cached up to &00-&100
font_bpl	    # 4 ; cached line length in bytes
font_bpc	    # 4 ; cache bytes per character
font_xoff	    # 4 ; os offset to plot char
font_yoff	    # 4 ; os offset to plot char
font_topred	    # 4 ; num pixs to shave off char top
font_botred	    # 4 ; num pixs to shave off char bot
font_leftred	    # 4 ; num pixs to shave off char left
font_rightred	    # 4 ; num pixs to shave off char right
font_formask	    # 4 ; cached foreground mask
font_bacmask	    # 4 ; cached background mask
font_wspace	    # 4 ; v 32 extra workspace

com_number	    # 4 ; number of command tables

opt_start	    # 0
opt_temporary       # 4 ; temp flags - ZERO THIS WHEN FINISHED WITH
opt_res1	    # 4 ; reserved 1
opt_res2	    # 4 ; reserved 2
opt_res6	    # 4 ; reserved 6
opt_info	    # 4 ; opt_info (successor to opt_format, opt_flags)
opt_res8	    # 4 ; reserved 8 (was control character set)
opt_tab		    # 4 ; default column tab for windows
opt_flags	    # 4 ; default flags for files/windows
opt_format	    # 4 ; default format type for windows
opt_addr	    # 4 ; default address of first byte
opt_stline	    # 4 ; default line number of first line
opt_linesp	    # 4 ; default line spaceing
opt_mwidth	    # 4 ; default width of margin
opt_cursor	    # 4 ; cursor norm,split1,split2,left
opt_cr		    # 4 ; code of newline/linefeed
opt_tabchar	    # 4 ; code of tab charcters
opt_wrapwidth	    # 4 ; wordwrap width
opt_minicols	    # 4 ; obsolete - set to 0 - use minibac/for instead
opt_switches	    # 4 ; on/off switches
opt_minibac	    # 4 ; minibuffer background palette entry
opt_minifor	    # 4 ; minibuffer foreground palette entry
opt_end		    # 0

default_mode        # 4 ; default mode name
startup_command	    # 4 ; command string to execute on startup

;tem_offsets	    # 4			; offsets for templates string...
;tem_offsets2	    # 4			; offsets for templates string...

opt_modedata	    # 4			; v Zap handled mode data

; Following wonderfully odd code by Dan Ellis :-)
; (Hacked into a slightly more readable form, with automatic dependency
;  on correct things like max_mode, by sja.)
;
; None of this can cope with max_mode > 99, so don't try it.
		ASSERT	max_mode <= 99

		GBLA	__modenum
		GBLS	__modestr
		GBLA	max_modeFUNT

; Basically, __modenum will be something like 00000015 (a hex number) when
; we mean 15 (a decimal number). So incrementing it over the 15 -> 20 boundary
; has to be special cased.
		MACRO
		inc_modenum
		[ __modenum:AND:15 = 9
__modenum	SETA	__modenum+7
		|
__modenum	SETA	__modenum+1
		]
		MEND

; If __modenum < 00000010, just use the last digit; otherwise use the last
; two, making the decimal number we require.
		MACRO
		set_modestr
		[ __modenum < 10
__modestr	SETS	:STR:__modenum:RIGHT:1
		|
__modestr	SETS	:STR:__modenum:RIGHT:2
		]
		MEND

; Set max_modeFUNT to be the same digits as max_mode, but in hex not dec.
; ie: max_mode = 15 => max_modeFUNT = &15
;
; This bit is fairly evil, so I'd better take responsibility - sja.
; Irritatingly, I have a choice between defining another macro, or making
; max_modeTMP global. Why can't objasm accept locals inside conditionals?
		[ max_mode < 10
max_modeFUNT	SETA	max_mode
		|
		GBLA	max_modeTMP
max_modeTMP	SETA	0
__modenum	SETA	max_mode
max_modeFUNT	SETA	0
		WHILE __modenum > 0
max_modeFUNT	SETA	max_modeFUNT + ((__modenum - 10*(__modenum / 10)):SHL:(4*max_modeTMP))
__modenum	SETA	__modenum / 10
max_modeTMP	SETA	max_modeTMP+1
		WEND
		]

opt_modebase        # 0
__modenum	SETA	0
		WHILE	__modenum<max_modeFUNT
		set_modestr
opt_mode$__modestr  # 4
		inc_modenum
		WEND

command_store	    # 4*max_ctable	; 1 word per ctable

mode_store	    # 8*max_mode	; 2 words per mode

opt_TMFbase         # 0
__modenum	SETA	0
		WHILE	__modenum<max_modeFUNT
		set_modestr
opt_TMF$__modestr   # 4
		inc_modenum
		WEND

if_bits		    # 4
if_count	    # 4
if_skip		    # 4
if_stop		    # 4

local_varlist	    # 4

zap_logname         # 4			; -> log name, or 0 for no logging

variable_size	    # 0			; size of the variable store

 END
