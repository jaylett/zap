; Contains module header and initialise/finialise/service call code and
; module command table.
; $Id: ModuleBits,fff,v 1.1.2.9 1999/04/25 19:58:44 ds Exp $

 GET h.ZapHeader
 GET h.Messages
 GET h.Strings
 GET h.Commands
 GET h.Execute
 GET h.Dispatch
 GET h.Mode0
 GET h.Mode1+2
 GET h.Mode3
 GET h.Mode4
 GET h.ModeBits
 GET h.StartCode
 GET h.Heap
 GET h.Messages
 GET h.Version
 GET h.TMFs

 EXPORT title_string
 EXPORT help_string
 EXPORT help_string_1
 EXPORT help_string_2
 EXPORT core_dump
 EXPORT Module_header
 EXPORT Module_end
 EXPORT service_reset
 EXPORT poll_word_changed

 IMPORT mode_table_11
 IMPORT conv_wind_off
 IMPORT warn_user
 IMPORT get_a_256_byte_buffer
 IMPORT poll_word_pdriverchanged
 IMPORT kill_lineeditor

 AREA |!!!Module_Header_Area|,CODE,READONLY

 ENTRY

Module_header
Start_code	     DCD start_code
Initialisation_code  DCD initialise_code
Finalisation_code    DCD finalise_code
Service_call_handler DCD service_call
Title_string	     DCD title_string
Help_string	     DCD help_string
Command_keyword_tab  DCD command_table
SWI_chunk_number     DCD 0
SWI_handler_code     DCD 0
SWI_decoding_table   DCD 0
SWI_decoding_code    DCD 0

title_string = |zap$|,0

help_string	= |zap$|,9,9
help_string_1	= version,"(00 Jan 0000)"
 [ BUILD > ""
		= " ",BUILD
  [ (BUILD:RIGHT:1 < "0" :LOR: BUILD:RIGHT:1 > "9") :LAND: patch_level <> ""
		= "-",patch_level
  ]
 |
  [ test_flag
		= " [TEST"
   [ patch_level <> ""
		= " ",patch_level
   ]
		= "]"
  |
   [ patch_level <> ""
		= " patch-",patch_level
   ]
  ]
 ]
help_string_2	FNS (" © Zap developers")

; Command table

command_table
 FNS (|zap$|:CC:"Command")
 DCD Zap_StringCommand
 DCD &630001
 DCD zcsy
 DCD zchp

 FNS (|zap$|:CC:"_AddMode")
 DCD Zap_AddAMode
 DCD &010101
 DCD addsy
 DCD addhp

 FNS (|zap$|:CC:"_Desktop")
 DCD Zap_Desktop
 DCD &02FF00
 DCD dessy
 DCD deshp

 DCD 0

zchp  = "*",27,0," executes a colon-separated string of Zap commands.",13
zcsy  = 27,30,"*]<string>",0

addhp = "*",27,0," adds a new text processing mode with entry point table "
      = "at",27,2,"given address.",13
addsy = 27,14,"table address in hex>",0

deshp = "*",27,0," runs",27,2,"Zap module",27,16,"(optionally) loads in",27,2
      = "given file on startup. Zap",27,")initialised as a WIMP task.",13
dessy = 27,30,"-noicon] [<filename>]",0

 ALIGN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INITIALISE AND FINALISE				       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X claims and clears workspace, links templates, added modes

initialise_code
 FNJSR
 MOV R0,#6
 MOV R3,   #(variable_size :AND: &00FF)
 ORR R3,R3,#(variable_size :AND: &FF00)
 SWI XOS_Module			; claim varable workspace
 BLVC messages_open
 FNRTS VS			; R3 saved
 STR R2,[R12]			; save workspace
 MOV R12,R2
 MOV R1,#0
 BL fill_words			; clear workspace
 ADR R0,Module_header		; start of the module
 FNSTR R0,env_modstart		; save it as the module start address
 FNADR R0,ext$l			; table of branch instructions
 FNSTR R0,env_main_entry	; save at start of workspace
 BL add_default_modes		; add default modes and commands
 FNRTS
ext$l DCD zap_entry_table

finalise_code
 FNJSR
 MOV R1,R12			; save private word pointer
 LDR R12,[R12]
 BL kill_wimp
 BL free_tmfs			; must be done before freeing workspace
 BL kill_heap
 BL kill_lineeditor
 MOV R0,#7
 MOV R2,R12
 MOV R12,R1
 SWI XOS_Module			; free workspace
 BL messages_close
 SUBS R0,R0,R0 ; CLV
 STR R0,[R12]			; null private word
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; OSCLI COMMANDS					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Zap_Desktop
 FNJSR
 LDR R12,[R12]
 FNLDR R14,wimp_task
 TEQ R14,#0			; task dead
 CMNNE R14,#1			; task starting up
; FNRTS NE			; return if task already active
 ;FNLDR R14,wimp_task
 ;CMN R14,#2			; *shutdown -> restart -> desktop
 ;FNRTS EQ			; TT fix...!
 MOVEQ R2,R0			; command tail (ie filename)
 ADREQ R1,title_string
 MOVEQ R0,#2
 SWIEQ XOS_Module			; enter the module
 FNRTS

Zap_AddAMode
 FNJSR
 LDR R12,[R12]
 MOV R1,R0			; string
 MOV R0,#16
 SWI XOS_ReadUnsigned
 MOVVC R0,R2
 BLVC add_new_mode
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SERVICE CALL HANDLER					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 DCD service_table ; table offset (ursula only)
service_call
 MOV r0,r0         ; ursula magic word
; fast service rejection code
 TEQ R1,#&49	; StartWimp
 TEQNE R1,#&4A	; StartedWimp
 TEQNE R1,#&27	; PostReset
 ;TEQNE R1,#&87	; FilterManagerInstalled
 ;TEQNE R1,#&88	; FilterManagerDying
 TEQNE R1,#&53	; Wimp_Closedown
 TEQNE R1,#&7F	; PDriverChanged
 MOVNES pc,r14
service_call_accepted
 LDR R12,[R12]			; get zap workspace
 TEQ R1,#&49
 BEQ service_startwimp
 TEQ R1,#&4A
 BEQ service_startedwimp
 TEQ R1,#&7F
 BEQ service_pdriverchanged
 TEQ R1,#&27
 ;TEQNE R1,#&87
 ;TEQNE R1,#&88
 BEQ service_reset
 TEQ R1,#&53
 BEQ service_taskdying
 MOVS PC,R14

service_table
 DCD 0  ; flags
 DCD service_call_accepted
; the following are the service calls we accept. They MUST be in
; order.
 DCD &27 ; reset
 DCD &49 ; start wimp
 DCD &4A ; started wimp
 DCD &53 ; wimp closedown
 DCD &7F ; printer driver changed
; DCD &88 ; filter manager installed
; DCD &89 ; filter manager dying
 DCD 0 ; end of list

;service_call
; LDR R12,[R12]			; get zap workspace
; TEQ R1,#&49
; BEQ service_startwimp
; TEQ R1,#&4A
; BEQ service_startedwimp
; TEQ R1,#&27
; BEQ service_reset
; ;TEQ R1,#&49
; ;TEQNE R1,#&4A
; ;TEQNE R1,#&87
; ;TEQNE R1,#&88
; ;BEQ service_reset
; TEQ R1,#&53
; BEQ service_taskdying
; MOVS PC,R14

service_startwimp
 FNJSR
 FNLDR R14,wimp_task
 ;CMN R14,#2;
 ;FNRTS EQ;
 TEQ R14,#0
 MVNEQ R14,#0
 FNSTR R14,wimp_task,EQ
 ADREQ R0,start_string
 MOVEQ R1,#0
 FNRTS

start_string	    FNS (|zap$|:CC:"_Desktop")

service_taskdying
 CMP R0,#0
 MOVNE PC,R14
 FNJSR
 FNLDR R14,wimp_task		; task pseudo - dead
 CMP R2,R14
 ADREQ R3,title_string
 MOVEQ R0,R3
 SWIEQ XOS_ExitAndDie
 FNRTS
; MOV R14,#0
; FNSTR R14,wimp_task		; task pseudo - dead
; MOV R14,#0
; FNSTR R14,file_num		; and no files (zap not active)
; FNRTS

service_startedwimp
 FNJSR
 FNLDR R14,wimp_task
 CMP R14,#0 ; CMN R14,#1
 MOVMI R14,#0
 FNSTR R14,wimp_task,MI
 FNRTS

service_reset
 FNJSR
; SWI &107
; MOV R14,#&800000
; SWI &107
;looped
; SUBS R14,R14,#1
; BPL looped
 ; BL kill_wimp
 ; FNRTS
 ;ADR R3,title_string
 ;MOV R0,R3
 ;SWI XOS_ExitAndDie
 MOV R14,#0
 FNSTR R14,wimp_task		; task pseudo - dead
 FNSTR R14,file_num		; and no files (zap not active)
 FNRTS

service_pdriverchanged
	FNJSR
	FNLDR	R14,wimp_poll_word
	ORR	R14,R14,#2		; set it...
	FNSTR	R14,wimp_poll_word
	FNRTS

 LOCAL

;X default modes 0-4,11 added to mode list & command table #

add_default_modes
	FNJSR	"R1,R7"
	LDR	R1,[R12,#env_modstart]	; start of the module
	ADR	R7,extm$l
loop$l	LDR	R0,[R7],#4
	TEQ	R0,#0
	BEQ	cmd$l
	ADD	R0,R1,R0
	BL	add_new_mode
	BVC	loop$l
	FNRTS
cmd$l	LDR	R0,extc$l
	ADD	R0,R1,R0
	BL	add_command_table
	FNRTS
extm$l	& mode_table_0
	& mode_table_1
	& mode_table_2
	& mode_table_3
	& mode_table_4
	& mode_table_5
	& mode_table_11
	& 0
extc$l  DCD key_command_table

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Module debug						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X writes all of Zap's memory to disc #

core_dump
 FNJSR
 ADR R1,module$l
 FNADR R4,ext1$l
 FNADR R5,ext2$l
 BL core_save
 ADRVC R1,main$l
 FNLDR R4,env_start,VC
 FNLDR R5,env_top,VC
 BLVC core_save
 ADRVC R1,worksp$l
 MOVVC R4,R12
 ADDVC R5,R12,#(variable_size :AND: &00FF)
 ADDVC R5,R5,#(variable_size :AND: &FF00)
 BLVC core_save
 FNRTS
ext1$l	 DCD Module_header
ext2$l	 DCD Module_end
module$l FNS (|zapdir$|:CC:".D-Mod")
worksp$l FNS (|zapdir$|:CC:".D-Work")
main$l	 FNS (|zapdir$|:CC:".D-Core")

core_save
 FNJSR
 MOV R2,R4
 MOV R3,R4
 MOV R0,#0
 SWI XOS_File
 FNRTS

; *******************************************************************
; Subroutine:	zapcommand
; Description:  OSCLI command zapcommand. Installs a temporary filter
;		for !Zap with will then execute the command specified
;		on the current task
; Parameters:	r0->string used by *ZapCommand
; Returns:	VS if error (r0->error block)
; *******************************************************************

Zap_StringCommand
;   FNJSR	"R1-R12"
;   LDR	R12,[R12]
;; do whatever
;   PUSH	"R0"
;   MOV	r1,#5			; current cursor block pointer
;   FNcall  Zap_ReadVar			; get it to r0
;   MOV	r10,r0			; r10=cursor block
;   LDR	r0,[r10]			; r0=window offset
;   FNcall  Zap_ConvWindOff		; convert to r8/r9 for window offset
;   PULL	"R0"
;   LDRB	r1,[r0]			; get first byte
;   CMP	r1,#'*'			; if * this is configuration
;   ADDEQ   r0,r0,#1			; ... so increment start pointer
;   MOVEQ   r8,#0			; ... set wind to 0
;   MOVEQ   r9,#0			; ... and file to 0
;   ORR	   r0,r0,#1<<31			; don't learn sequence
;   FNcall  Zap_CommandString		; do this command
;   FNRTS

; ; FNJSR "R1-R12"
;  STMFD	R13!,{R1-R12,R14}
;  LDR	R12,[R12]
; ; FNLDR	R13,env_top			; ! start of free memory
; ; SUB	R13,R13,#&100
; ; MOV	R1,#5				; current cursor block pointer
; ; BL	read_var
; ; MOV	R10,R0				; r10=cursor block
; ; LDR	R0,[R10]			; r0=window offset
;  FNLDR	R10,car_cursor
; ; CMP	R10,#0
; ; FNRTS	LE
;  STMFD	R13!,{R0}
; ; PUSH	"R0"
;  LDR	R0,[R10,#c_wind]		; r0=window offset
;  BL	conv_wind_off			; get r8,r9...
;  LDMFD	R13!,{R0}
; ; PULL	"R0"
;  LDRB	R14,[R0]			; get first byte
;  TEQ	R14,#'*'			; if * this is configuration
;  ADDEQ	R0,R0,#1			; ... so increment start pointer
;  MOVEQ	R8,#0				; ... set wind to 0
;  MOVEQ	R9,#0				; ... and file to 0
;  MOVEQ	R10,#0				; ... and cursor to 0
;  ORR	R0,R0,#1<<31			; don't learn sequence
;  BL	command_string
;  LDMFD	R13!,{R1-R12,PC}

; *******************************************************************
; Subroutine:	zapcommand
; Description:  OSCLI command zapcommand. Installs a temporary filter
;		for !Zap with will then execute the command specified
;		on the current task
; Parameters:	r0->string used by *ZapCommand
; Returns:	VS if error (r0->error block)
; *******************************************************************

; zapcommand
	FNJSR	"R0-R5"
	BL	findzap
	MOVVC	R5,R0
	BLVC	get_a_256_byte_buffer
	FNRTS	VS
	MOV	R2,R0
;	MOVVC	R0,#6
;	MOVVC	R3,#&100
;	SWIVC	XOS_Module		; returns pointer in R2.
	MOV	R0,R5
	MOV	R4,R2
	; er strcopy?
loop$l
	LDRB	r3,[r0],#1
	STRB	r3,[r2],#1
	CMP	r3,#32
	BGE	loop$l			; string copied to our block
	MOV	r3,#0
	STRB	r3,[r2],#1

;	MOV	R1,#4			; current cursor block pointer
;	BL	read_var

	FNLDR	R0,wimp_poll_word
	ORR	R0,R0,#1		; set it...
	FNSTR	R0,wimp_poll_word

;	MOV	r3,r0			; r3=handle
;	ADR	r0,filtername		; set the name of the filter
;	ADR	r1,filtercode
;	MOV	r2,r4
;	MOV	r4,#0
;	SWI	XFilter_RegisterPostFilter
	FNRTS				; exit command routine

;filtername
; FNS ("Temp" + |zap$| + "Filter")
; ALIGN

; *******************************************************************
; Subroutine:	findzap
; Description:  Finds the Zap module so that it's workspace can be used
; Parameters:	none
; Returns:	r12->Zap's workspace
; *******************************************************************
findzap
 FNJSR "R0-R5"
 MOV	r0,#18			   ; read module info
 ADR	r1,zap_title$l
 SWI	XOS_Module		   ; find zap
 MOV	r12,r4			   ; r12=zap workspace
 FNRTS
zap_title$l
  FNS (|zap$|)
 ALIGN

; *******************************************************************
; Subroutine:	findworkspace
; Description:  Return our workspace pointer in r11
; Parameters:	none
; Returns:	r11-> our workspace
; *******************************************************************
;findworkspace
;   STMFD   R13!,{r0-r5,R14}		; Stack registers
;   LADR    r1,module_title		  ; name of this module
;   MOV	    R0,#18
;   XSWI    XOS_Module		     ; find the module
;   MOV	    r11,r4			  ; copy to r11
;					  ; this was the bit that was causing
;					  ; zap to crash so frequently
;;   REM     "Workspace = %&B, %&4"
;   LDMFD   R13!,{r0-r5,pc}		 ; Return from call

; *******************************************************************
; Subroutine:	filtercode
; Description:  Filter Zap to execute the command specified + remove
;		filter
; Parameters:	r0= reason code (ignored)
;		r1= buffer (ignored)
;		r2= task handle
;		r12= string to execute
; Returns:	as passed
; *******************************************************************

poll_word_changed
	FNJSR
	SUBS	R0,R0,#0
	FNLDR	R0,wimp_poll_word
	TST	R0,#1
	BLNE	poll_word_command
	FNRTS	VS
	FNLDR	R0,wimp_poll_word
	TST	R0,#2
	BLNE	poll_word_pdriverchanged
	MOV	R14,#0
	FNSTR	R14,wimp_poll_word
	FNRTS

poll_word_command
	FNJSR
	FNLDR	r10,car_cursor		; r10=cursor block
	LDR	r0,[r10]		; r0=window offset
	BL	conv_wind_off		; get r8,r9...
	BL	get_a_256_byte_buffer
	LDRB	r1,[r0]			; get first byte
	CMP	r1,#'*'			; if * this is configuration
	ADDEQ	r0,r0,#1		; ... so increment start pointer
	MOVEQ	r8,#0			; ... set wind to 0
	MOVEQ	r9,#0			; ... and file to 0
	ORR	r0,r0,#command_DontLearn

	BL	command_string		; corrupts...?

; erroneous free of memory...

; MOVVC	R2,R6				; hope it's still there...
; MOVVC	R0,#7
; SWIVC	XOS_Module

	FNRTS	VC
error$l
; SUBS	R14,R14,R14			; clv
; MOV	R7,R0
; MOV	R2,R6				; hope it's still there...
; MOV	R0,#7
; SWI	XOS_Module
	ADDS	R0,R0,#4		; also CLV...
	MOV	R1,#0
	BL	warn_user
	FNRTS

;task$l
; DCD &4B534154 ; TASK

;taskname$l
; = "ZapCmdTask" ; ZCT :-/

; LDMFD	R13!,{r1-r12,R14}		; Return from call
; ORRS	PC,R14,#VBit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End of the module					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 AREA |ZEnd_Of_Module|,READONLY,CODE

Module_end

 END
