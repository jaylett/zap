; Contains font code
; $Id: Fonts,fff,v 1.1.2.7 1999/03/12 14:12:15 james Exp $

 GET h.ZapHeader
 GET h.Messages
 GET h.Heap
 GET h.Strings
 GET h.CreateWind
 GET h.TMTVars
 GET h.CreateFile
 GET h.ModeBits

 IMPORT check_object_type
 IMPORT font_ensure
 IMPORT do_allwindow
 IMPORT warn_user
 IMPORT Beep

 EXPORT correct_font
 EXPORT load_font_file
 EXPORT ensure_workarea
 EXPORT ensure_workarea_sprite
 EXPORT setup_red_blk
 EXPORT find_zap_font
 EXPORT choose_fontm
 EXPORT correct_font
 EXPORT conv_font_off
 EXPORT get_font_off
 EXPORT minimise_font_memory
 EXPORT add_font_suffix
 EXPORT Bitmapfont
 EXPORT setup_fontmc_with_extras

 EXPORT Outlinefont

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Font memory management					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; font_list points to a list of blocks of the following format detailing
; the data stored in the font dynamic area. NB This area can move whenever
; the heap resizes. font_num gives the number of active font blocks.
; font_list only moves when a new block created.
;
; #0   Offset in the dynamic area of this font area (changes dynamically)
; #4   Pointer to the name of the font cached here / 0 if none (block dead)
; #8   width of font characters
; #&0C height of font characters (&110 characters cached)
; #&10 log2bpp font cached in
; #&14 Flags byte: b0 Font needed - do not throw away (tmp flag)
; #&15
; #&16
; #&17
; #&18 reserved 0
; #&1C reserved 0

;E R7=font block
;X R0=address of the font cache

get_font_addr
 FNJSR
 FNLDR R0,font_start
 LDR R14,[R7]
 ADD R0,R0,R14
 FNRTS

 LOCAL

;X R0=offset of font block R7=address of font block

create_font_block
 FNJSR "R1-R6"			; returns R7
 FNLDR R4,font_list
 FNLDR R6,font_num
 MOV R5,#0			; current number
loop$l
 CMP R5,R6
 BGE new$l
 ADD R7,R4,R5,LSL#5
 LDR R0,[R7,#4]
 TEQ R0,#0
 BEQ found$l
 ADD R5,R5,#1
 B loop$l
new$l				; need to claim a new block
 MOV R0,R4
 MOV R1,R6,LSL#5		; current amount used
 ADD R1,R1,#256
 BIC R1,R1,#127			; claim some more
 BL heap_ensure
 FNRTS VS
 FNSTR R0,font_list
 MOV R5,R6
 ADD R7,R0,R5,LSL#5
 ADD R6,R6,#1
 FNSTR R6,font_num
 FNLDR R0,font_end
 FNLDR R14,font_start
 SUB R0,R0,R14
 STR R0,[R7]
found$l
 MOV R1,#0
 ADD R2,R7,#4
 MOV R3,#32-4
 BL fill_words
 MOV R0,R5
 FNRTS

 LOCAL

;E R0=new size (it is aligned upwards) R7=font block
;X Block size set and other font block/file blocks shifted

set_font_block_size
 FNJSR "R1-R7"
 ADD R1,R0,#3
 BIC R1,R1,#3			; R1=wanted block size aligned
 FNLDR R4,font_end
 FNLDR R0,font_start
 SUB R4,R4,R0			; R4=current length of font area
 FNLDR R6,font_list
 FNLDR R0,font_num
 ADD R6,R6,R0,LSL#5		; R6=end of list pointer
 ADD R0,R7,#32
 CMP R0,R6
 MOVGE R2,R4
 LDRLT R2,[R0]			; R2=offset of next block
 SUB R3,R4,R2			; R3=amount of data sitting above this block
 LDR R5,[R7]			; offset of this block
 SUB R5,R2,R5			; current length of this block
 SUBS R5,R1,R5			; R5=size change required
 BGT inc$l
 BLT dec$l
done$l				; update following blocks
 ADD R7,R7,#32
 CMP R7,R6
 LDRLT R0,[R7]
 ADDLT R0,R0,R5
 STRLT R0,[R7]
 BLT done$l
 FNRTS
inc$l				; increase block size
 MOV R0,#-2			; font area
 ADD R1,R4,R5			; new size
 BL set_block_size
 FNLDR R0,font_start,VC
 ADDVC R1,R2,R0
 ADDVC R2,R1,R5
 SWIVC XZapRedraw_MoveBytes	; BL move_bytes
 BVC done$l
 FNRTS
dec$l
 FNLDR R0,font_start
 ADD R1,R2,R0
 ADD R2,R1,R5
 SWI XZapRedraw_MoveBytes	; BL move_bytes
 MOV R0,#-2			; font area
 ADD R1,R4,R5			; new size
 BL set_block_size
 BVC done$l
 FNRTS

;E R7=font block
;X R0=offset in font list 0,1,2,etc

get_font_off
 FNLDR R0,font_list
 SUB R0,R7,R0
 MOV R0,R0,LSR#5
 MOV PC,R14

;E R0=offset in font list 0,1,2,etc
;X R7=font block

conv_font_off
 FNLDR R7,font_list
 ADD R7,R7,R0,LSL#5
 MOV PC,R14

;E R7=font block
;X Block 'killed' and memory freed

kill_font_block
 FNJSR "R1-R3"
; SWI &107
 MOV R1,#0
 ADD R2,R7,#4
 MOV R3,#32-4
 BL fill_words			; clear the entries in the block
 MOV R0,#0
 BL set_font_block_size		; free the memory
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Removal of fonts					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X All fonts not at 1bpp and not being used are removed #

minimise_font_memory
 FNJSR "R7-R10"

 ADR R10,sub$l
 BL do_allwindow
 FNRTS VS

 FNLDR R7,font_list
 FNLDR R8,font_num
 ADD R8,R7,R8,LSL#5		; end of list
loop$l
 CMP R7,R8
 FNRTS CS

; a mode change bug seems to cause exits here...!

 LDR R0,[R7,#4]
 CMP R0,#0
 BLE next$l			; not being used...!?!

; and here...!

 LDR R0,[R7,#&10]		; bpp
 TEQ R0,#0
 BEQ next$l			; keep

 LDRB R0,[R7,#&14]
 TST R0,#1			; that flag bit...
 BIC R0,R0,#1
 STRB R0,[R7,#&14]
 BLEQ kill_font_block		; don't need this block any more
 FNRTS VS
next$l
 ADD R7,R7,#32
 B loop$l

sub$l
 FNJSR "R4-R7"
 LDR R6,[R8,#w_font]		 ; eek!! is it even a bitmap'd font !?!?
 MOV R4,#font_cache0
 MOV R5,#font_data0
loop2$l
 LDR R0,[R6,R4]
 CMP R0,#-1
 BLNE setthebit$l
 ADD R4,R4,#4
 CMP R4,R5
 BNE loop2$l
 FNRTS

setthebit$l
 FNJSR
 LDR R14,[R8,#w_flags]		; get flags
 ANDS R14,R14,#redraw_font_mask
 TEQ R14,#redraw_fast_font
 FNRTS EQ

 BL conv_font_off		; R7=block used by this window
 LDRB R14,[R7,#&14]
 ORR R14,R14,#1			; keep
 STRB R14,[R7,#&14]
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Ensure red_workarea sufficiently large for the font	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=size of buffer required
;X R0=red_workarea updated #

ensure_workarea
 FNJSR "R1"
 MOV R1,R0
 FNLDR R0,red_workarea		; buffer pointer
 BL heap_ensure			; ensure new size
 FNSTR R0,red_workarea,VC	; save new ptr
 FNRTS

;E red_charw/charh/bpp set up
;X workrea area ensured for 64 bytes + sprite area size #

ensure_workarea_sprite
 FNJSR "R1"
 MOV R0,#1
 ADD R1,R12,#red_flags
 SWI XZapRedraw_SpriteSize	; first pass
 BLVC ensure_workarea
 MOVVC R0,#&81
 SWIVC XZapRedraw_SpriteSize	; second pass
 ADDVC R0,R0,#64
 BLVC ensure_workarea
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Loading/installing a new font file at 1bpp			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=font leaf name (it is copied)
;X R7=font file block (font file loaded) #

load_font_file
 FNJSR "R1-R6,R8"		; R7 returned
 MOV R1,R0
 MOV R0,#15
 ADR R4,zap_font_path
 SWI XOS_File			; find info on the file R4=length
 BLVC check_object_type
 FNRTS VS
 CMP R4,#&20
 BLLT err$l
 BLVC create_font_block		; R7=font block to put it in
 MOVVC R0,R4
 BLVC set_font_block_size	; reserve space for the file
 ADRVC R4,zap_font_path
 BLVC get_font_addr
 MOVVC R2,R0
 MOVVC R6,R2			; save start address of the font area
 MOVVC R3,#0
 MOVVC R0,#14
 SWIVC XOS_File			; load the file into the font area
 FNRTS VS			; (corrupts R2-R5)
 LDR R0,[R6]
 LDR R14,zapf$l
 TEQ R0,R14
 BLNE err$l			; file didn't start with "ZapFont"
 MOVVC R0,R1
 BLVC str_len
 ADDVC R0,R0,#1
 BLVC heap_claim			; claim a buffer for the font name
 STRVC R0,[R7,#4]			; name buffer address
 MOVVC R2,R1
 MOVVC R1,R0
 BLVC strcopy			; copy in name string
 LDRVC R2,[R6,#8]
 LDRVC R3,[R6,#12]
 STRVC R2,[R7,#8]			; width of characters
 STRVC R3,[R7,#12]		; height of characters
 LDRVC R4,[R6,#&10]		; first character code
 LDRVC R5,[R6,#&14]		; last character code (+1)
 MOVVC R0,#0
 SWIVC XZapRedraw_CachedCharSize	; R2=cbpl R3=cbpc
 MOVVC R8,R3			; save cbpc
 SUBVC R5,R5,R4			; number of characters given
 ADDVC R1,R6,#&20
 MOVVC R2,R6
 MULVC R3,R5,R8			; shift bitmaps to start of buffer
 SWIVC XZapRedraw_MoveBytes	; BL move_bytes
 MOVVC R0,R8,LSL#8		; 256 chars
 ADDVC R0,R0,R8,LSL#4		; &110 chars
 BLVC set_font_block_size		; make big enough to contain all the chars
 MOVVC R1,R6
 MULVC R2,R4,R8
 ADDVC R2,R2,R1
 MULVC R3,R5,R8
 SWIVC XZapRedraw_MoveBytes	; shift fonts back up again to correct offset
 ADDVC R5,R4,R5			; last known character
 BLVC add_vdu_bitmaps
 FNRTS
zapf$l = "ZapF"
zap_font_path = |zap$|,"Fonts$Path",0
 ALIGN
err$l ERR "zap_e_notzfont"

;E R4=first known character R5=last known character+1 R7=font block
;X Bitmaps added for the unknown characters and &7F to complete the font #
;  (Uses redraw block)

add_vdu_bitmaps
 FNJSR "R1-R5"
 ADD R1,R12,#red_flags		; start of redraw block
 LDR R2,[R7,#8]
 LDR R3,[R7,#12]
 FNSTR R2,red_charw
 FNSTR R3,red_charh
 CMP R5,#&20
 BLLE add_system_bitmaps	; add system characters if needed
 BLVC ensure_workarea_sprite	; ensure workarea big enough for this font
 FNRTS VS
 BL get_font_addr
 MOV R2,#0			; first extra bitmap
 SUBS R3,R4,#1			; last one
 MOV R4,R0
 SWIGT XZapRedraw_AddVduBitmaps
 MOVVC R2,#&7F
 MOVVC R3,#&7F
 SWIVC XZapRedraw_AddVduBitmaps	; do the delete character
 MOVVC R2,R5
 MOVVC R3,#&110
 SUBVC R3,R3,#1
 SWIVC XZapRedraw_AddVduBitmaps	; do up to &10F (the cursor characters)
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Read system font from OS					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R2=charw R3=charh R7=font block
;X If characters are 8*8 then system characters &20-&FF added #
;  R5=&100

add_system_bitmaps
 FNJSR "R1-R4"			; returns R5
 TEQ R2,#8
 TEQEQ R3,#8
 FNRTS NE			; wrong size
 BL get_font_addr		; R0=bitmaps buffer
 ADD R1,R12,#red_flags		; needs work area
 SWI XZapRedraw_ReadSystemChars	; read the characters
 MOVVC R5,#&100			; now last font cached
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Find a zap font						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R7=font block
;X red_charw,charh,caddr,cbpl,cbpc set up from this block #

setup_red_blk
 FNJSR "R2-R3"
 LDR R2,[R7,#8]			; width
 LDR R3,[R7,#12]		; height
 FNSTR R2,red_charw
 FNSTR R3,red_charh
 FNLDR R0,scn_bpp
 SWI XZapRedraw_CachedCharSize
 FNSTR R2,red_cbpl,VC
 FNSTR R3,red_cbpc,VC
 FNLDR R2,font_start,VC
 LDRVC R3,[R7]
 ADDVC R2,R2,R3
 FNSTR R2,red_caddr,VC
; SWI &107
 FNRTS

 LOCAL

;E R0=log2bpp R1=font name
;X R7=font block if found / 0 if not found |

look_for_zap_font
 FNJSR "R1-R6"			; R7 returned
 MOV R3,R0			; R3=log2bpp
 MOV R4,R1			; R4=font name
 FNLDR R7,font_list
 FNLDR R6,font_num
 ADD R6,R7,R6,LSL#5		; end of the list
loop$l
 CMP R7,R6
 MOVGE R7,#0
 FNRTS GE			; not found
 LDR R1,[R7,#4]
 TEQ R1,#0
 BEQ next$l			; no font here
 MOV R2,R4
 BL strCMP
 BNE next$l
 LDR R0,[R7,#&10]		; log bpp
 TEQ R0,R3			; a match?
 FNRTS EQ			; found a match
next$l
 ADD R7,R7,#32
 B loop$l

 LOCAL

; note that this routine fails for DSA redraw colour depth changes...!

;E R0=log2bpp (0 or current only)
;  R1=font name
;X R7=font block if found (loaded if necessary). Error otherwise #
;  NB All font blocks may shifted about.

find_zap_font
 FNJSR "R1-R6"
 MOV R4,R0			; save bpp asked for
 BLVC look_for_zap_font
 BVS finalex$l
 TEQ R7,#0
 BNE finalex$l

 MOV R0,R4
 BL checktoseeifalink
 MOVVC R0,R4
 BLVC look_for_zap_font
 BVS finalex$l
 TEQ R7,#0
 FNRTS NE			; found it

; SWI &107
 MOV R0,#0
 BL look_for_zap_font
 TEQ R7,#0
 BNE zero$l			; found the mode zero form
 MOV R0,R1
 BL load_font_file		; load in the mode zero form
 FNRTS VS
; BVS finalex$l
zero$l				; R7=mode 0 form
 TEQ R4,#0
 FNRTS EQ			; that was all that was asked for!
 BL get_font_off		; convert to an offset
 MOVVC R6,R0			; save the source font block
 LDRVC R1,[R7,#4]
 LDRVC R2,[R7,#8]
 LDRVC R3,[R7,#12]		; get name,width,height
 BLVC create_font_block		; create new font block (all moves)
 STRVC R2,[R7,#8]
 STRVC R3,[R7,#12]		; store in new block
 STRVC R4,[R7,#&10]		; and bpp it's going to be cached at
 MOVVC R0,R4
 SWIVC XZapRedraw_CachedCharSize; R3=size of a character
 MOVVC R0,R3,LSL#8
 ADDVC R0,R0,R3,LSL#4		; &110 characters
 BLVC set_font_block_size	; claim memory for font to live in
 STRVC R1,[R7,#4]		; name now valid
 BLVC setup_red_blk
 FNLDR R0,font_list,VC
 ADDVC R6,R0,R6,LSL#5		; source font block (moved)
 FNLDR R4,font_start,VC
 LDRVC R0,[R6]
 ADDVC R4,R4,R0			; source bitmap
 ADDVC R1,R12,#red_flags
 MOVVC R2,#0
 MOVVC R3,#&110
 SUBVC R3,R3,#1
 SWIVC XZapRedraw_ConvertBitmap	; create the bitmap
finalex$l
 FNRTS

;anerror$l
; MOV R6,R0
; SWI XHourglass_Off
; MOV R0,R6
; FNRTV

 LOCAL

;returns ptr to real filename in R1...
checktoseeifalink
 FNJSR "R2-R7"
 MOV R7,R1
 MOV R0,#15
 ADR R4,zap_font_path
 SWI XOS_File			; find info on the file R4=length
 BLVC check_object_type
 BVS err$l
 CMP R4,#&40
 FNRTS CS
 MOV R1,R7
 FNLDR R6,wimp_data		; buffer
 ADD R6,R6,#&40
 MOV R0,#14
 MOV R1,R7
 MOV R2,R6
 MOV R3,#0
 ADR R4,zap_font_path		; ZapFont$Path..
 SWI XOS_File
 BVS err$l
 LDR R14,[R6]
 LDR R0,chkforzflk$l
 CMP R0,R14
 ADDEQ R1,R6,#5
 MOVNE R1,R7
 FNRTS
err$l
 STR R0,[R13]			; cunning stuff ;|
 FNRTS
chkforzflk$l = "ZFLK"

 LOCAL

;E R1=file name pointer...
;X NE if file doesn't exist... R0=1(file)/2(dir)/3(image)/0(unk)

check_file_exists
 FNJSR "R1-R5"			; not needed :(
 MOV R0,#15
 ADR R4,zap_font_path
 SWI XOS_File			; find info on the file R4=length
 TEQ R0,#1			; NE object R1 doesn't exist as a file
 FNRTS

 LOCAL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Choose fonts for newly created/reopened window		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;X font blk blatted with -1s
; FIXME: why isn't this using Zap_FillWords?

clear_font_block
 FNJSR "R1,R2" ; ,R3"
 MOV R14,#-1
 LDR R1,[R8,#w_font]
 ADD R2,R1,#font_blk		; right?
; LDR R3,[R1,#font_data0]
; ADD R1,R1,#font_data0		; skip cached fonts...!?!?!
; ADD R1,R1,#4			; skip 0th font
loop$l
 STR R14,[R1],#4
 CMP R1,R2
 BNE loop$l

; LDR R1,[R8,#w_font]
; STR R3,[R1,#font_data0]	; restore 0th font

 FNRTS

 LOCAL

;E r0 = font name
;X knowfontexists = -1 unless the fontname is a directory, or was a default ("<some stuff>.0")
;  ie: knowfontexists = -1 unless we can add substyle suffices for this font.
pre_add_font_suffix
 FNJSR "R0-R2,R7,R11"
 MOV R11,R0
 MOV R14,#-1
 STR R14,knowfontexists
wasaspecialcase
 MOV R1,R11
 BL check_file_exists		; eeek - filing system operation...?
 FNRTS VS
 CMP R0,#0
 FNRTS EQ			; doesn't exist at all ...
 CMP R0,#1			; is it a file?
 STRNE R0,knowfontexists	; no, so directory or image - that's okay, it might have styles
 FNRTS NE

notdirectory			; it's a file ...
 MOV R0,R1
 BL str_len
 ADD R7,R1,R0			; end of filename
 LDRB R14,[R7,#-1]
 TEQ R14,#'0'			; is the last character '0'?
 LDREQB R14,[R7,#-2]
 TEQEQ R14,#'.'			; and the one before that '.'?
 FNRTS NE			; ie: "<some stuff>.0". This is the same as "<some stuff>"
 MOV R14,#0			; so kill off the last two characters
 STRB R14,[R7,#-2]
 B wasaspecialcase		; and try again ...

knowfontexists
 DCD -1

;E R11=pointer to font name
;  R10=0/8/16/24-124 depending on the substyle
;  R1=pointer to after 0 at end of font name...
;X R0=style word (based on R10)...?
;  R1=pointer to the correct font name (probably in wimp_data)
;
; ... seems to only do the first substyle. Hence 'quick', I guess.

quick_add_font_suffix
 FNJSR "R2,R5-R7,R11"
 MOV R7,R1
 MOV R1,R11

 LDR R0,knowfontexists		; are substyles possible?
 CMP R0,#0
 FNRTS MI

 MOV R2,R1
 FNLDR R11,wimp_data		; buffer
 ADD R11,R11,#&60
 MOV R1,R11			; not needed.
 BL strcpy
 MOV R1,R7

 MOV R0,#'.'
 STRB R0,[R1,#-1]
; MOV R7,R1
 MOV R6,#0
;loop
 ADR R5,masks$l
 LDRB R5,[R5,R6]
 MOV R1,R7
 ANDS R5,R5,R10,LSR #3
 MOVEQ R2,#'0'
 STREQB R2,[R1],#1
 TST R5,#4
 MOVNE R2,#'U'
 STRNEB R2,[R1],#1
 TST R5,#8
 MOVNE R2,#'S'
 STRNEB R2,[R1],#1
 TST R5,#2
 MOVNE R2,#'I'
 STRNEB R2,[R1],#1
 TST R5,#1
 MOVNE R2,#'B'
 STRNEB R2,[R1],#1
 MOV R2,#0
 STRB R2,[R1]
 MOV R1,R11
 MOV R0,R5,LSL #3		; masked style word
 FNRTS

; Like quick, but does all suffices required.
add_font_suffix
 FNJSR "R2,R5-R7,R11"
 MOV R7,R1
 MOV R1,R11

 LDR R0,knowfontexists
 CMP R0,#0
 FNRTS MI

 MOV R2,R1
 FNLDR R11,wimp_data		; buffer
 ADD R11,R11,#&60
 MOV R1,R11
 BL strcpy
 MOV R1,R7

 MOV R0,#'.'
 STRB R0,[R1,#-1]
 MOV R6,#0
loop$l
 ADR R5,masks$l
 LDRB R5,[R5,R6]
 MOV R1,R7
 ANDS R5,R5,R10,LSR #3
 MOVEQ R2,#'0'
 STREQB R2,[R1],#1
 TST R5,#4
 MOVNE R2,#'U'
 STRNEB R2,[R1],#1
 TST R5,#8
 MOVNE R2,#'S'
 STRNEB R2,[R1],#1
 TST R5,#2
 MOVNE R2,#'I'
 STRNEB R2,[R1],#1
 TST R5,#1
 MOVNE R2,#'B'
 STRNEB R2,[R1],#1
 MOV R2,#0
 STRB R2,[R1]
 MOV R1,R11
 BL check_file_exists
 MOVEQ R0,R5,LSL #3		; ???
 FNRTS EQ
 ADD R6,R6,#1
 TEQ R6,#masks_end$l-masks$l
 BNE loop$l
 MOV R0,R1
 BL str_len
 MOV R14,#'0'
 STRB R14,[R7]			; doesn't exist - use default
 MOV R14,#0
 STRB R14,[R7,#1]		; same as r1 ...
; MOV R1,R11			; pointer to correct font name?
 MOV R0,#0
 FNRTS

masks$l
 = 15
 = 15-8, 15-4, 15-2, 15-1
 = 15-8-4, 15-8-2, 15-8-1
 = 15-8-4-2, 15-8-4-1
 = 15-8-2-1
masks_end$l
 ALIGN

 LOCAL

; cache multiple fonts iff they are needed...
;E R8=window
;X R0=all w_fontc values setup from w_font #

; setup_fontmc
;  FNJSR "R1,R6,R7,R10"
;  BL get_info_about_sub_styles
;  FNRTS VS
;  SWI XHourglass_On
;  MOV R10,#0
;  LDR R6,[R8,#w_font]		; source font
;  B loop$l

setup_fontmc_with_extras	; alternate entry point, used by redraw code
 FNJSR "R1,R6,R7,R10"
 LDR R14,[R8,#w_flags]		; get flags
 ANDS R14,R14,#redraw_font_mask
 TEQ R14,#redraw_vdu_font
 TEQNE R14,#redraw_vdu_system
 TEQNE R14,#redraw_fast_font
 FNRTS EQ			; Outline/system fonts here so steer clear...!

 MOV R10,#0
 LDR R6,[R8,#w_font]		; source font
 MOV R11,R0
loop$l
 TST R11,#1
 BLNE maybeneedssetup
 MOVS R11,R11,LSR#1		; :-)
 FNRTS EQ			; finished.

 ADD R10,R10,#8
 CMP R10,#font_blk
 BLT loop$l
setup_fontmc_single_xit
 SUBS R14,R14,R14 ; clv
 FNRTS

 LOCAL

maybeneedssetup
 FNJSR
 ADD R0,R6,#font_data0
 LDR R0,[R0,R10,LSR #1]
 LDR R14,[R6,R10,LSR #1]		; setup w_fontc
 CMP R14,#-1
 CMPNE R0,#-1
 FNRTS NE

 MOV R1,R0
 SWI XHourglass_On
 MOV R0,R1

 CMP R0,#-1
 BLEQ setup_this_font_now	; EQ notsetup_yet  ; never fires...?

 BLVC conv_font_off		; R7=font
 FNLDR R0,scn_bpp,VC
 LDRVC R1,[R7,#4]		; font name
 BLVC find_zap_font		; R7=new font block
 BLVC get_font_off
maybe_notsetup_yet
 STRVC R0,[R6,R10,LSR #1]	; setup w_fontc
 SWI XHourglass_Off
 FNRTS

;E R8 R10 0 - 60  R6 = w_font (block ptr)
;X R0 = number of font.
setup_this_font_now
 FNJSR "R1,R2,R10,R11"
 LDR R1,[R6,#font_data0]
 FNLDR R14,font_list
 ADD R14,R14,R1,LSL #5
 LDR R2,[R14,#4]		; pointer to name of base font :-)

 FNLDR R11,wimp_data		; buffer
 ADD R11,R11,#&60
 MOV R1,R11
 BL strcopy
 LDRB R14,[R1,#-2]
 TEQ R14,#"0"
 LDREQB R14,[R1,#-3]
 TEQEQ R14,#"."
 BNE nosspossible$l
 MOV R0,R11
 BL find_leaf_name
 MOV R1,R0
 MOV R14,#0
 STRB R14,[R1,#-1]
 BL do_one_font_pass		; corrupts wimp_data + 60
 ;ADDVC R14,R6,#font_data0
 ;STRVC R0,[R14,R10,LSR #1
 MOVVS R0,#-1
 FNRTS

nosspossible$l
 MOV R1,R11
 MOV R0,#0
 BL find_zap_font
 BLVC get_font_off		; R0=offset of 1bpp block
 MOVVS R0,#-1			; doesn't matter...
 LDRVC R14,[R8,#w_font]
 ADDVC R14,R14,#font_data0
 STRVC R0,[R14,R10,LSR #1]	; that font's data...

; MOV R0,#0
; BL find_zap_font
; BLVC get_font_off		; R0=offset of 1bpp block
; LDRVC R14,[R8,#w_font]
; ADDVC R14,R14,#font_data0
; STRVC R0,[R14,R10,LSR #1]
; MOV R0,#-1
 FNRTS				; perfectly Ok...

 LOCAL

local_ss_info_word
 DCD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Choose font size					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;E R8 of window
;X w_rl,w_rw,w_rh set up for current font according to w_flags
;  space in workarea reserved #

correct_font
 FNJSR "R1-R4,R7"
 LDR R1,[R8,#w_flags]
 AND R1,R1,#&00320000		; font bits
 TEQ R1,#&00120000
 TEQNE R1,#&00200000
 BEQ aafont$l			; anti-aliased font
 TEQ R1,#&00020000
 BEQ vdusys$l			; vdu system redraw font
 LDR R0,[R8,#w_font]
 LDR R0,[R0,#font_data0]	; sufficient
 BL conv_font_off		; R7=font block
; CMP R7,#0	; ????
; FNRTS LE	; ????
 LDR R4,[R7,#8]			; width of font
 LDR R2,[R7,#12]		; height of font
 LDR R0,[R8,#w_linesp]		; line spacing in pixels
 ADD R3,R2,R0			; total line height inc line spacing
 TEQ R1,#&00100000
 BEQ scaled$l			; vertically scaled quick draw font
 TEQ R1,#&00220000
 BEQ double$l			; double height
 B end$l			; must be standard size
scaled$l
 LDR R0,[R8,#w_format]
 BIC R0,R0,#1<<28
 STR R0,[R8,#w_format]		; clear the double height bit FIRST
 CMP R2,#8
 BGT end$l			; don't try scaling large fonts
 FNLDR R0,scn_magy		; log2 os units per pixel
 CMP R0,#1
 BGT end$l			; lowres mode so don't double
 LDR R0,[R8,#w_format]
 ORR R0,R0,#1<<28
 STR R0,[R8,#w_format]		; mark as a double height font
double$l			; double the font height
 MOV R2,R2,LSL#1
 MOV R3,R3,LSL#1
 B end$l
vdusys$l
 MOV R4,#8
 MOV R2,#8			; 8*8 pixels
 LDR R0,[R8,#w_linesp]
 ADD R3,R2,R0
 FNLDR R0,scn_magx
 RSB R0,R0,#1
 MOV R4,R4,LSL R0		; scale x (eg mode22)
 FNLDR R0,scn_magy		; log2 os units per pixel
 RSB R0,R0,#2			; standard 1/8 char is 4=1<<2 os pixels
 MOV R2,R2,LSL R0
 MOV R3,R3,LSL R0		; scale y
 B end$l			; save
aafont$l
 MOV R0,#-1			; vdu
 BL font_ensure			; make sure font_charw ok
; FNRTS VS
 FNLDR R2,font_charh,VC
 FNLDR R4,font_charw,VC
 LDRVC R0,[R8,#w_linesp]
 ADDVC R3,R2,R0
; B end$l
; fall through...
end$l				; R2=charh R3=charh+linesp R4=charw
 STRVC R2,[R8,#w_rh]		; text height
 STRVC R3,[R8,#w_rl]		; rasters per line
 STRVC R4,[R8,#w_rw]		; width of chars in pixels
 FNSTR R2,red_charh,VC
 FNSTR R4,red_charw,VC
 BLVC ensure_workarea_sprite	; ensure workarea big enough
 FNRTS

 LOCAL

;E R8=window block
;X w_font setup to default values (multiple fonts) #

choose_fontm
 FNJSR "R1,R7,R10,R11"
 FNLDR R0,scn_magy		; get Y Eig
 CMP R0,#1
 FNLDR R0,font_namehigh,LE
 FNLDR R0,font_namelow,GT	; get name of font
 BL pre_add_font_suffix
 BVS err$l
 BL change_bmf_core
 BLVC minimise_font_memory
 FNRTS VC			; clear V
err$l
 BL realerr$l
 FNRTS
realerr$l
 ERR "zap_NoFont"		; should do much better than this and
				; revert to using the system font in VDU
				; redraw, or /something/...

 LOCAL
;E r0 = font name to set to
 DCD &19
Bitmapfont			; R3=address of prev item start R10=text
 FNJSR
 BL pre_add_font_suffix
 BVS error_cantfindthat$l
 BL change_bmf_core
 BLVC save_window_status
 BLVC new_window_status		; update the window
 FNRTS VC
error_cantfindthat$l
 ADR R0,err_nofontfound$l
 MOV R1,#warn_UseMessageTrans
 BL warn_user
 BL choose_fontm
 FNRTS
err_nofontfound$l
 FNS ("zap_NoFont")

 LOCAL
BeepAndPause
 FNJSR "R0-R3"
 SWI &20107
 SWI XOS_ReadMonotonicTime
 ADD R3,R0,#&10
loop$l
 MOV R0,#19
 SWI XOS_Byte				; vsync
 SWI XOS_ReadMonotonicTime
 CMP R0,R3
 BLT loop$l
 FNRTS

 LOCAL
;E r0 font name to change to
; (If it was a file and ended ".0" then that will have been removed)
;X font set up for default style
change_bmf_core
 FNJSR "R10,R11"
 MOV R11,R0
 BL clear_font_block		; ... for this window

 SWI XHourglass_On

 MOV R10,#0
loop$l
 MOV R2,R11
 FNLDR R11,wimp_data		; buffer
 ADD R11,R11,#&60
 MOV R1,R11
 BL strcopy			; copy font name
 BLVC do_one_font_pass		; \E r10 = substyle
 BLVC minimise_font_memory
 BVS err$l
 SWI XHourglass_Off
 FNRTS

err$l
 MOV R10,R0
 SWI XHourglass_Off		; this shouldn't ever return VS
 MOV R0,R10			; however I'd rather not risk it ...
 FNRTV

 LOCAL
;\E R1 -> after 0 at end of fontname, R10 substyle, R11 fontname
;\X r0 = -1 => couldn't find it, else -> font data?
do_one_font_pass
 FNJSR
 PUSH "R1"
 BL quick_add_font_suffix	; B, I or U depending on R10, \X r1 -> correct font name
 MOV R0,#0
 BL find_zap_font
 BLVC get_font_off		; R0=offset of 1bpp block
 PULL "R1"
 BVC store_font_off$l
secondtry$l
 SUBS R14,R14,#0		; clv...
 BL add_font_suffix		; B, I or U depending on R10
 MOV R0,#0
 BL find_zap_font
 BLVC get_font_off		; R0=offset of 1bpp block
 MOVVS R0,#-1			; doesn't matter...
store_font_off$l
 LDRVC R14,[R8,#w_font]
 ADDVC R14,R14,#font_data0
 STRVC R0,[R14,R10,LSR #1]	; that font's data...
 FNRTS

 LOCAL

 DCD &19
Outlinefont
 FNJSR
 LDRB R3,[R0]
 CMP R3,#'#'
 ADDEQ R0,R0,#1
 MOV R10,R0			; font name string
 BL str_len
 ADD R1,R0,#8
 FNLDR R0,font_name
 BL heap_ensure
 FNRTS VS
 FNSTR R0,font_name
 MOV R1,R0
 MOV R2,R10
 BL strcopy			; copy in new font name
 CMP R3,#'#'
 BLNE new_font
 FNRTS

 END
