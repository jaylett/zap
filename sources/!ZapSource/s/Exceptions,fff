; Contains main module entry start code and wimp poll dispatches.
; $Id: Exceptions,fff,v 1.1.2.6 2000/02/06 23:43:09 ds Exp $

 GET h.ModuleBits
 GET h.ZapHeader
 GET h.StartUp
 GET h.Strings
 GET h.StartCode

 IMPORT test_forkey
 IMPORT read_var

 EXPORT init_setup_abort_handlers
 EXPORT unset_running_var
 EXPORT storewkspandstack
 EXPORT set_up_quit_flag
 EXPORT get_a_256_byte_buffer
 EXPORT zephyr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exceptions							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

storewkspandstack
	STR	R12,do_dump_zapwksptemp
	STR	R13,do_dump_zapr13tmp
	MOV	PC,R14

init_setup_abort_handlers
	STMFD	R13!,{R0-R3,R8,R14}
	FNLDR	R0,wimp_task
	STR	R0,do_dump_zapsthtemp
	BL	storewkspandstack
	ADR	R8,dump_buffer

	MOV	R0,#environ_UndefinedInstruction
	ADR	R1,dump_UndefinedInstruction
	BL	changeenv

	MOV	R0,#environ_PrefetchAbort
	ADR	R1,dump_PrefetchAbort
	BL	changeenv

	MOV	R0,#environ_DataAbort
	ADR	R1,dump_DataAbort
	BL	changeenv

	MOV	R0,#environ_AddressException
	ADR	R1,dump_AddressException
	BL	changeenv

	MOV	R0,#environ_Error
	ADR	R1,dump_UntrappedError
	BL	changeenv2

	MOV	R0,#environ_Exit
	ADR	R1,dump_ExitCondition
	BL	changeenv

	BL	set_running_var

	LDMFD	R13!,{R0-R3,R8,PC}^

deregister_abort_handlers
	STMFD	R13!,{R0-R4,R8,R14}
	BL	unset_running_var
	ADR	R8,dump_buffer
	MOV	R0,#environ_UndefinedInstruction
	BL	changeenvback
	MOV	R0,#environ_PrefetchAbort
	BL	changeenvback
	MOV	R0,#environ_DataAbort
	BL	changeenvback
	MOV	R0,#environ_AddressException
	BL	changeenvback
	MOV	R0,#environ_Error
	BL	changeenvback
	MOV	R0,#7
	LDR	R2,ebuffer			; free it...
	SWI	XOS_Module
	LDMFD	R13!,{R0-R4,R8,PC}^

deregister_exit_abort_handler
	STMFD	R13!,{R0-R4,R8,R14}
;	BL	unset_running_var		; ! here ? NNeeded/nowork
;	ADR	R8,dump_buffer + (12 * 5)
	ADR	R8,dump_store_ExitCondition
	MOV	R0,#environ_Exit
	BL	changeenvback
	LDMFD	R13!,{R0-R4,R8,PC}^

;E R0=string to alias taskwindow command to
;  R3 = name of os_var to be set
;X command aliased #

dump_buffer
dump_store_UndefinedInstruction		% 12
dump_store_PrefetchAbort		% 12
dump_store_DataAbort			% 12
dump_store_AddressException		% 12
dump_store_UntrappedError		% 12
dump_store_ExitCondition		% 12

	MACRO
	DumpAbort	$label,$nodumpregs
dump_$label
	; Warning: non-reentrant code ATM
	; STMFD	R13!,{R0-R12,R14}
			; don't rely on R13!...?
	;LDR	 R14,do_dump_aborted	; the flag...
	;CMP	R14,#0			; reentrancy chk...
	;BNE	totally_exit$label
	;STR	 R14,do_dump_aborted	; a flag...

	;B	totally_exit$label ; this code was corrupted... R1/R11
	; BL	do_dump				; generic_abort_handler
	;LDMFD	R13!,{R0-R12,R14}

	;LDR	R12,dump_store_$label + 4	; not relevant now...
	;LDR	PC,dump_store_$label ; <stored_R14>

 ; We already have R0..R12,R14 stacked
 ; This is at the end of the code common to all of Zap's exception handlers,
 ;  in place of the LDR PC

	;LDR	R1,[R13,#52]	; read stacked R14
	;TST	R11,#3
	;BNE	totally_exit$label ; this code corrupted... R1/R11

	;LDR	R1,[R13,#52]	; read stacked R14
	;TST	R1,#3
	;BNE	totally_exit$label ; this code was corrupted... R1/R11

	;LDRNE	PC,dump_store_$label ; <stored_R14>
 ; We need to store the registers for *ShowRegs, etc.
;	STR	R2,local_store_texttmp + 64; store "PC"	; ?
	STR	R1,local_store_texttmp + 60
	ADR	R1,local_store_texttmp
	STMIA	R1,{R0-R14}^
	MOV	R0,R0			; nop

	LDR	R1,local_store_texttmp + 60
	STR	R1,local_store_texttmp + 4
	STR	R14,local_store_texttmp + 60; store "PC" ?

;	STR	R14,[R13,#8]	; store "PC"
	; ;LDR	   R2,local_exceptR0
	; ;LDR	   R3,local_exceptR1
	; ;STMIA	R1!,{R2,R3}	; ?
	; ;LDR	   R2,local_exceptR2
	; ;LDR	   R3,local_exceptR3
	; ;STMIA	R1!,{R2,R3}	; ?
	; ;STMIA	R1!,{R4-R8}	; ?
	; ;LDMIA	R13,{R8-R12}	; R13 not changed ???
	; STMIA	R1,{R9-R14}^	; user mode transfer
	; STR	R14,[R1,#24]	; store "PC"
	; ;BIC	R14,R14,#&FC000000  ; no flags...

	;ADR R1,local_store_dump
	;LDMIA R1,{R2,R3}^	; enter user mode... (little difference)
	;STMIA R1,{R12}^	; user mode transfer

	; I don't know if we need to preserve SPSR_<mode> as well
	; Now we can return
	; LDMFD	R13,{R0-R12,R14} ; not ! here...!
	;MOV R0,#0
	MOV	R14,#0 ; needed?
	TEQP	R14,#0	; depends on no r14 before this...?
	MOV	R0,R0	; remove if next instr doesn't access banked regs

	LDR	R12,do_dump_zapwksptemp ; zap's saved workspace (hopefully)
	LDR	R13,do_dump_zapr13tmp

 [ "$nodumpregs"=""
	BL	chg_eng_n_copy_words
 ]

 ; De-register exit handler...
 [ "$label"="ExitCondition"
	BL	deregister_exit_abort_handler
 ]

;	SWI	XHourglass_Smash	; here!?!

; [ "$nodumpregs"="1"
;	BL	deregister_abort_handlers	; if exit...?
; ]

	ADR	R0,std_err_blk_$label
	B	rest_straightforwards

	MEND

; ------------------- outside macros -------------------------

local_store_texttmp
	DCD 0 ; 00 ; R0
	DCD 0 ; 04 ; R1
	DCD 0 ; 08 ; R2
	DCD 0 ; 12 ; R3
	DCD 0 ; 16 ; R4
	DCD 0 ; 20 ; R5
	DCD 0 ; 24 ; R6
	DCD 0 ; 28 ; R7
	DCD 0 ; 32 ; R8
	DCD 0 ; 36 ; R9
	DCD 0 ; 40 ; R10
	DCD 0 ; 44 ; R11
	DCD 0 ; 48 ; R12
	DCD 0 ; 52 ; R13
	DCD 0 ; 56 ; R14
	DCD 0 ; 60 ; R15

local_exceptR0
 DCD 0
;local_exceptR1
; DCD 0
;local_exceptR2
; DCD 0
;local_exceptR3
; DCD 0

std_err_blk_UndefinedInstruction
 FNS ("Undefined Instruction at &")
std_err_blk_PrefetchAbort
 FNS ("Prefetch Abort at &")
std_err_blk_DataAbort
 FNS ("Data Abort at &")
std_err_blk_AddressException
 FNS ("Address Exception at &")
std_err_blk_UntrappedError
 FNS ("External error")
std_err_blk_ExitCondition
 FNS ("X")

	DumpAbort	UndefinedInstruction
	DumpAbort	PrefetchAbort
	DumpAbort	DataAbort
	DumpAbort	AddressException
	DumpAbort	UntrappedError,1 ; ???
	DumpAbort	ExitCondition,1

 ALIGN

do_dump_ret
	&	0
do_dump_zapsthtemp
	&	0
do_dump_aborted
	&	0
do_dump_zapwksptemp
	&	0
do_dump_zapr13tmp
	&	0

; do_dump
;	STR	R14,do_dump_ret
;	  ;LDR	   R14,do_dump_aborted	; the flag...
;	  ;CMP 	R14,#0
;	;LDRNE	PC,do_dump_ret		; re-entrancy return NE...
;	  ;STR	   R14,do_dump_aborted	; a flag...
;
; really_do_dump
;	;SWI	XOS_GetEnv
;	;BVS	do_dump_error
;	  LDR	  R0,do_dump_zapsthtemp	; get task handle...
;	  SWI	  &62586		; XDDEUtils_ThrowbackUnRegister
;	  ADR	  R0,s4$l		; see if alias is set up
;	  ADR	  R1,s7$l
;	  MVN	  R2,#0
;	  MOV	  R3,#0
;	  MOV	  R4,#0
;	  SWI	  XOS_ReadVarVal
;	  BVS	  do_dump_error
;	  CMP	  R2,#0
;	  BEQ	  donttrytounalias
;
;	  ADR	  R0,s7$l		; unalias taskwindows.
;	  ADR	  R3,s4$l
;	  BL	  alias_general
; donttrytounalias
;	  ADR	  R1,s9$l
;	  MOV	  R0,#5
;	  SWI	  XOS_File		; check for <Zap$Dir>.Debug
;	  BVS	  do_dump_error
;	  CMP	  R0,#0
;	BLNE	core_dump
; do_dump_error
;	ADDVS	R0,R0,#4
;	SWIVS	XOS_Write0		; very crude error reporting
;	MOVS	R0,#0
;	LDR	PC,do_dump_ret

rest_straightforwards
	BL	kill_print_job
	LDR	R7,local_store_texttmp + 60; "PC"	; ?
	ADR	R14,std_err_blk_ExitCondition
	CMP	R0,R14
	BEQ	gracefullyexit
	ADR	R14,std_err_blk_UntrappedError
	CMP	R0,R14
	BLEQ	displayolderrmsg
	BL	displayerrmsg
;	BL	unset_running_var
	CMP	R1,#1
	BNE	totally_exit

;	BL	set_running_var ; ???

	BL	checkanddump
	SUBS	R14,R14,R14 ; clv
	B	main_loop

chg_eng_n_copy_words
	FNJSR
	MOV	R0,#environ_ExceptionRegisters
	MOV	R1,#0
	MOV	R2,#0
	MOV	R3,#0
	SWI	XOS_ChangeEnvironment ; does get R1 as where to store regs.
	ADRVC	R14,local_store_texttmp
	LDMVCIA	R14!,{R2-R9}
	STMVCIA	R1!,{R2-R9}
	LDMVCIA	R14!,{R2-R9}
	STMVCIA	R1!,{R2-R9}
	FNRTS

displayerrmsg ; E R0,R7
	FNJSR
	BIC	R7,R7,#3
	FNLDR	R1,wimp_block
	MOV	R6,R1
	MOV	R14,#0
	STR	R14,[R1],#4
	MOV	R5,R0
	MOV	R2,R0
	BL	strcpy
	ADR	R14,std_err_blk_ExitCondition
	CMP	R5,R14
	ADR	R14,std_err_blk_UntrappedError
	CMPNE	R5,R14
	BIC	R0,R7,#&FC000000	; no flags please...
	MOV	R2,#12
	SWINE	XOS_ConvertHex8
	ADR	R2,ctoq
	BL	strcopy
	MOV	R0,R6
	[ LOGGING = SYSLOG
	ADD R0,R0,#4
	SYSLOGF "Exception '%0s'",LOG_EXCEPTION
	SUB R0,R0,#4
	]
	MOV	R1,#3
	ADR	R2,zapisnamed
	SWI	XWimp_ReportError
	FNRTS
ctoq
 FNS (" (Cancel to quit)")

displayolderrmsg
	FNJSR "R0"
	LDR	R0,ebuffer
	ADD	R0,R0,#4
	[ LOGGING = SYSLOG
	ADD R0,R0,#4
	SYSLOGF "Exception (old) '%0s'",LOG_EXCEPTION
	SUB R0,R0,#4
	]
	MOV	R1,#0
	ADR	R2,zapisnamed
	SWI	XWimp_ReportError
	FNRTS


	LOCAL

kill_print_job
	FNJSR	"R0-R1"
	FNLDR	R0,wimp_print_job
	TEQ	R0,#0
	SWINE	&A0149			; XPDriver_AbortJob
	FNLDR	R1,wimp_print_job
	TEQ	R1,#0
	MOVNE	R0,#0
	FNSTR	R0,wimp_print_job,NE
	SWINE	XOS_Find		; close file
	; ignore any errors - for now :-)
	FNLDR	R0,wimp_print_prevjob	; previous job
	TEQ	R0,#0
	MOVNE	R1,#0
	FNSTR	R1,wimp_print_prevjob,NE
	SWINE	&A0145			; XPDriver_SelectJob
	FNRTSS


checkanddump
	FNJSR
	ADR	R1,s9$l
	MOV	R0,#5
	SWI	XOS_File		; check for <Zap$Dir>.Debug
	FNRTS	VS
	CMP	R0,#0
	BLNE	core_dump
	FNRTS

changeenv	; this and all following labels are local
	MOV	R2,#0
	MOV	R3,#0
	SWI	XOS_ChangeEnvironment
	STMIA	R8!,{R1,R2,R3}
	MOVS	PC,R14

changeenv2	; this and all following labels are local
	PUSH	"R0-R1"
	MOV	R0,#6
	MOV	R3,#256
	SWI	XOS_Module
	MOVVC	R3,R2
	STR	R3,ebuffer
	PULL	"R0-R1"
	MOV	R2,#0			; ?
	SWI	XOS_ChangeEnvironment
	STMIA	R8!,{R1,R2,R3}
	MOVS	PC,R14

changeenvback				; all following labels are local
	FNJSR
	LDMIA	R8!,{R1,R2,R3}
	SWI	XOS_ChangeEnvironment
	FNRTS

get_a_256_byte_buffer
	LDR	R0,ebuffer
	MOV	PC,R14

; um, how big...?
ebuffer
	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
;	DCD 0
; must be big enough...

;s4$l = "Alias$Taskwindow",0
;s7$l = "<",|zap$|,"$Taskwindow>",0
s9$l = "<",|zap$|,"$Dir>.Debug",0
zapisnamed = |zap$|,0
s0$l = "No",0
s1$l = "Yes",0
s2$l = |zap$|,"$Running",0

 ALIGN

set_running_var
	ADR	  R0,s1$l		; unalias Zap$Running
	ADR	  R3,s2$l
	B	  alias_general

unset_running_var
	ADR	  R0,s0$l		; unalias Zap$Running
	ADR	  R3,s2$l
;	B	  alias_general
	; fall through...?

alias_general
	FNJSR	  "R1-R4"
	MOV	  R1,R0			; var value
	BL	  str_len
	MOV	  R2,R0			; var length
	MOV	  R0,R3
	MOV	  R3,#0
	MOV	  R4,#0			; macro string
	SWI	  XOS_SetVarVal
	FNRTS

set_up_quit_flag
	STR R10,localquitflag
	MOV PC,R14

localquitflag
	DCD 0

gracefullyexit
	BL	deregister_abort_handlers
;	MOV	R10,#0
	LDR	R10,localquitflag
	SUBS	R14,R14,R14		; clv
	CMP	R10,#0
	BLEQ	clean_up
	LDR	R12,dump_store_ExitCondition + 4
	SUBS	R14,R14,R14		; clv
	LDR	PC,dump_store_ExitCondition ; old handler...

totally_exit
	BL	deregister_abort_handlers
	BL	checkanddump
	SUBS	R14,R14,R14	; clv
	MOV	R0,#&FF		; SHIFT
	BL	test_forkey
	BCS	main_quit_nodie	; main_quit
	B	main_quit	; end

; debugging code

zephyr

 [ LOGGING=ZEPHYR

zephyrmsg_blk
 DCD &20
 DCD &0
 DCD &0
 DCD &0
 DCD &804C0
 DCD &32323232
 DCD &32323232
 DCD &0

 FNJSR "R0-R6"
 ADR R1,zephyrmsg_blk + &14
 MOV R2,#8
 SWI XOS_ConvertHex8
 MOV R0,#&80000
 ORR R0,R0,#&4C0
 ADR R1,zephyrmsg_blk
 MOV R2,#0
 MOV R3,#32
 MOV R4,#0
 MOV R5,#0
 MOV R6,#0
 BL message_send
 FNRTS

 |

 MOV PC,R14

 ]

 END
