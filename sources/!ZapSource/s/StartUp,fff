; Contains startup code including read/writing config file etc.
; Also contains some misc error code
; $Id: StartUp,fff,v 1.1.2.22 1999/06/26 19:30:35 ds Exp $

 GET h.ZapHeader
 GET h.Messages
 GET h.Heap
 GET h.Redraw
 GET h.KeyBits
 GET h.ModeBits
 GET h.CreateFile
 GET h.Strings
 GET h.Version
 GET h.CreateWind

; IMPORT env_noicon_check
 IMPORT command_string

 EXPORT init_vars
 EXPORT init_stack
 EXPORT free_stack
 EXPORT init_fixed
 EXPORT init_config
 EXPORT find_version_block
 EXPORT read_given_config_block
 EXPORT write_config_block
 EXPORT find_config_block
 EXPORT init_envstring
 EXPORT init_load
 EXPORT Saveoptions
 EXPORT err3
 EXPORT err12
 EXPORT err23
 EXPORT err41
 EXPORT check_object_type
 EXPORT generate_error
 EXPORT init_external
 EXPORT init_clones
 EXPORT remove_external_object
 EXPORT get_pointer_to_code_cols
 EXPORT	add_clone_mode_entry
 EXPORT find_clone_mode_entry
 EXPORT remove_clone_mode_entry

stack_size		* &800		; stack size
initial_wimpslot	* 96*1024	; 96K initial wimpslot

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INITIALISE VARIABLES						  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X variable blocks claimed and first word nulled & vars set up #

init_vars
 FNJSR "R1-R11"
 ADR R10,list$l
a$l
 LDMIA R10!,{R0,R1}		; buffer size, offset of buffer pointer
 CMP R0,#0
 BMI b$l			; end of list reached (-1)
 CMP R0,#4
 MOVCC R0,#4			; ensure at least 4 bytes
 BL heap_claim
 STRVC R0,[R12,R1]		; save buffer address
 MOVVC R14,#0
 STRVC R14,[R0]			; clear first word by default
 BVC a$l
 FNRTS
b$l
 BL check_scn_valid		; read scn_* variables
 FNRTS VS
 MOV R0,#0			; R0=0
 MOV R1,#-1			; R1=-1
 MOV R2,#1			; R2=1
 FNSTR R0,file_num
 FNSTR R0,wind_num
 FNSTR R0,font_num
 FNSTR R0,red_blklen
 FNSTR R0,red_datasize
 FNSTR R0,wind_count
 FNSTR R0,car_mode
 FNSTR R0,car_omode
 FNSTR R0,key_llen
 FNSTR R0,key_flags
 FNSTR R0,key_last
 FNSTR R0,key_lastcom
 FNSTR R0,clk_depth
 FNSTR R0,font_cache
 FNSTR R0,yank_off
 FNSTR R0,yank_len
 FNSTR R0,red_bac
 FNSTR R0,red_screen
 FNSTR R0,menu_count
 FNSTR R0,mini_lineed
 FNSTR R0,wimp_loglen
 FNSTR R0,if_count
 FNSTR R0,if_skip
 FNSTR R0,if_stop
 FNSTR R0,local_varlist
 FNSTR R0,wimp_poll_word
 FNSTR R1,wimp_throwback
 FNSTR R1,wimp_drag
 FNSTR R1,wimp_helpdata
 MOV R14,#2
 FNSTR R14,red_for
 FNLDR R14,wimp_dzap
 STR R1,[R14,#&2C]
 FNLDR R14,wimp_print
 STR R2,[R14,#&10]
 FNLDR R14,car_input
 STR R1,[R14,#c_wind]
 STR R1,[R14,#c_owind]
 FNLDR R14,car_cursor
 STR R1,[R14,#c_wind]
 STR R1,[R14,#c_owind]
 FNLDR R14,car_selection
 STR R1,[R14,#c_wind]
 STR R1,[R14,#c_owind]
 FNLDR R14,wimp_sizelist
 STR R1,[R14]
 FNLDR R14,key_maplist
 STR R1,[R14]
 FNLDR R14,ext_comm_flags
 MOV R1,#4
 STR R1,[R14]
; MOV R0,#0
 MOV R1,#0
 MOV R2,#&200
 ADR R3,keyname$l
 BL add_key_table
 MOV	R0, #&33	; default attributes - full read write for all
 FNSTR  R0, wimp_attr
 FNRTS
keyname$l FNS ("Default")
list$l
 DCD &500,wimp_data ; was &100 - now allows for set_up_print_palette
 DCD 0,fnd_string
 DCD 0,fnd_replace
 DCD &20,fnd_replace2
 DCD 4*kbdbuf_size,wimp_kbdbuf
 DCD 0,file_list
 DCD 0,wind_list
 DCD 0,font_list
 DCD 0,red_blkbuf
 DCD 0,fnd_tree
 DCD 4,wimp_cacheline
 DCD 0,key_learn
 DCD 0,menu_struct
 DCD 0,menu_entries
 DCD 0,font_struct
 DCD 0,font_entries
 DCD 0,font_ssstruct
 DCD 0,font_ssentries
 DCD 0,wimp_timeformat
 DCD 0,wimp_dateformat
 DCD 0,wimp_selecttype
 DCD 0,wimp_adjusttype
 DCD 0,wimp_modelist
 DCD 0,font_name
 DCD 0,font_namelow
 DCD 0,font_namehigh
 DCD 4,wimp_sizelist
 DCD 0,wimp_eolstring
 DCD 0,wimp_sofstring;
 DCD 0,wimp_eofstring;
 DCD 16,key_maplist
 DCD 0,yank_ptr
 DCD 0,wimp_indentstring
 DCD 0,red_data
 DCD &80,red_workarea   ; &80
 DCD 0,font_cinit
 DCD 0,font_cmain
 DCD &20,font_wspace
 DCD 4,menu_handles
 DCD &80,wimp_loglist   ; &80
 DCD &60,key_off
 DCD 0,throw_name
 DCD &20,ext_modes	; &40
 DCD &20,ext_comms	; &80
 DCD &10,ext_messages
 DCD &20,ext_clones
 DCD 4,ext_comm_flags
 DCD 0,wimp_clicksend
 DCD 0,startup_command
 DCD 0,wimp_config
 DCD if_limit*4,if_bits	; eeek lots of memory :-<
 ;DCD 0,tem_offsets
 DCD -1

;;;;;;;;;;;;;;;;; stack control ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;E R12=module workspace NO STACK R14=return address
;X R0-R11 corrupt R12 preserved R13=FD stack filled with &ABC00DEF #

init_stack
 FNLDR R0,env_start
 ADD R0,R0,#initial_wimpslot-&8000 ; initial size to claim
; ADD R0,R0,#initial_wimpslot	; initial size to claim
; SUB R0,R0,#&8000
 MOV R1,#-1
 MOV R10,R0			; save slot size asked for
 SWI XWimp_SlotSize		; set wimpslot (CORRUPTS R4 !!!)
 MOVVS PC,R14
 CMP R0,R10
 BLT err$l			; wimp slot is not big enough
 LDR R1,stack_word
 FNLDR R2,env_start
 ADD R13,R2,#stack_size		; set up full descending stack
 FNSTR R13,env_top		; start of free memory
 SUB R3,R13,R2
 B fill_words			; is this needed...?
err$l ERR "zap_e_initstack"

;X R0=amount unused on stack (still &ABC00DEF) |

free_stack
 STMFD R13!,{R1-R2,R14}
 MOV R0,#0
 FNLDR R1,env_start
 LDR R2,stack_word
fr1
 LDR R14,[R1,R0]
 TEQ R14,R2
 ADDEQ R0,R0,#4
 BEQ fr1
 LDMFD R13!,{R1-R2,PC}
stack_word DCD &ABC00DEF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Claim fixed buffers					   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X Fixed length bufs claimed Then env_top updated Then bufs cleared #

init_fixed
 FNJSR "R1-R11"
 FNLDR R10,env_top		; current pointer
 ADR R1,table$l
a$l
 LDMIA R1!,{R2-R3}
 CMP R2,#0
 STRPL R10,[R12,R3]		; save buffer address
 ADDPL R10,R10,R2		; next buffer
 BPL a$l
 FNLDR R2,env_top		; start of bufs
 SUB R3,R10,R2			; number of bytes
 MOV R0,R10			; new env_top
 BL set_wimpslot		; claim memory
 FNRTS VS
 MOV R1,#0
 MOVVC R1,#0
 BLVC fill_words		; clear the memory
 FNRTS
table$l
 DCD &100,wimp_buffer
 DCD &800,wimp_block
 DCD &64,car_block		; hex?
 DCD &80,wimp_dzap
 DCD &80,wimp_print
 DCD &200,fnd_macros
 DCD cusr_blk,car_input
 DCD cusr_blk,car_cursor
 DCD cusr_blk,car_selection
 DCD 32,wimp_mzap
 DCD 80,mini_openblk
 DCD &40,menu_memory
 DCD -1

 LOCAL

;X !Config loaded in if found and correct type
;  Options block read and set up.
;  Mode blocks left stored in memory undread until the mode is loaded. #
;  Mode blocks all cleared to 0's. TMF MessageTrans pointers all cleared to 0's.

init_config
 FNJSR "R1-R10"
; BL loadzapredraw
 BL load_config
 MOVVC R1,#0
 ADDVC R2,R12,#opt_mode0
 MOVVC R3,#max_mode*4
 BLVC fill_words			; clear all mode words to 0
 MOVVC R0,#max_mode*4
 BLVC heap_claim			; one word for each mode data entry
; FNRTS VS
 FNSTR R0,opt_modedata,VC		; address of mode data buffers (to be filled)
 MOVVC R1,#0
 MOVVC R2,R0
 MOVVC R3,#max_mode*4
 BLVC fill_words			; clear all mode data pointers
 FNADD R2,R12,opt_TMFbase,VC
 MOVVC R1,#0
 MOVVC R3,#max_mode*4
 BLVC fill_words			; clear the TMF MessageTrans pointers
 MOVVC R0,#1
 BLVC read_given_config_block	; read the options block
 FNRTS VS
 CMP R0,#-1
 BLEQ err$l
 ;FNLDR R14,opt_switches
 ;TST R14,#1 << 21
 ;BLEQ loadzapredraw
; BLVC loadzapredraw
 BLVC update_options		; make any changes required to options block
 FNRTS
err$l ERR "zap_e_badconfig"

 LOCAL

;X R6=address of heap block with the config file in.

load_config
 FNJSR "R1-R5"
 MOV R0,#5
 ADR R1,file$l
 SWI XOS_File			; get file info
 MOV R6,#0
 BVS err$l			; load default
 TST R0,#1			; file?
 BEQ err$l			; load default
 MOV R0,R4			; file length
 BL heap_claim
 FNRTS VS
 MOV R6,R0			; save block address
 MOV R0,#&FF
 ADR R1,file$l
 MOV R2,R6
 MOV R3,#0
 SWI XOS_File			; load the file
 BVC std$l
err$l				; problem? load the default file instead
 MOV R0,R6
 ADR R6,default$l
 TEQ R0,R6
 BLNE heap_free			; if claimed space for saved file, free it
std$l
 LDR R0,[R6]			; first word of file
 LDR R14,default$l
 TEQ R0,R14
 BNE err$l			; not of correct format (default must be OK)
 ADD R4,R6,#4
copy$l				; separate into individual heap blocks...
 LDMIA R4,{R1,R3}
 TEQ R1,#0
 BEQ done$l
 CMP R1,#-1
 RSBGES R14,R1,#3		; if unexpected block type found, *stop*
 BLT done$l
 TST R3,#3			; not word aligned? *stop*
 BNE done$l
 CMP R3,#65536			; 64K is more than enough for any mode ;-)
 BHI done$l
 MOV R0,R4
 ADD R4,R4,R3
 BL copy_and_link_config_block
 BVC copy$l
 FNRTS
done$l
 MOV R0,R6
 ADR R6,default$l
 TEQ R0,R6
 BLNE heap_free
 FNLDR R6,wimp_config
 FNRTS				; file loaded ok
file$l = "<",|zap$|,"$Options>",0
 ALIGN
default$l			; default config file
 = "Conf"

__global_start$l
 DCD 1				; global storage block
 DCD __global_end$l-__global_start$l	; total length
 DCD 0				; res0
 DCD 0				; res1
 DCD 0				; res2
 DCD 0				; res6
 DCD &F				; opt_info (+or to opt_format, opt_flags)
 DCD 0				; char set for ctrl chars (0-3)
 DCD 10				; default column tab width for windows
 DCD &00100001			; default flags for files/windows scaled+undo
 DCD &00001000			; default format type for windows text+tabs
 DCD 0				; default address of first byte
 DCD 1				; default line number of first line
 DCD 1				; default line spacing
 DCD 0				; default width of margin
 DCD &01020000			; cursor types norm,split1,split4,left
 DCD &0A0A0A0A			; code of newline/linefeed
 DCD &09090909			; code of tab charcters
 DCD 77				; wrapwidth
 DCD 0 ; &00000700		; byte 0=background 1=foreground - HMM!
 DCD &48070105			; switches word ; &00070105
 DCD &FFFFFF00			; reserved 3 ; fg
 DCD &00000000			; reserved 4 ; bg
__global_end$l

	&	-1, 20, version_major, version_minor, version_config

	&	2
	&	&54
	FNS	("Text")
	&	&38
	&	&1203004D, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10
	&	4
	&	&00000000

	&	2
	&	&58
	FNS	("Byte")
	&	&3C
	&	&05400010, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10, &FFBB0010
	&	4
	&	&282E0200

halfword_config
	&	2
	&	&5C
	FNS	("Halfword")
	&	&3C
	&	&05400008, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10, &FFBB0010
	&	4
	&	&142E0200

	&	2
	&	&58
	FNS	("Word")
	&	&3C
	&	&05400004, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10, &FFBB0010
	&	4
	&	&042E0200

	&	2
	&	&54
	FNS	("ASCII")
	&	&38
	&	&05000040, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10
	&	4
	&	&00000000

	&	2
	&	&B4
	FNS	("Code")
	&	&98
	&	&05000042, &0200000F, &00000000, &00000000
	&	-1
startofcolours$l
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10, &99999930, &00BBFF30, &00CC0050
	&	&FFBB0010, &77777710, &BBBBBB10, &99999910
	&	&77777710, &77777710, &DDDDDD10, &BBEEEE10
	&	&00BBFF10, &DDDDDD10, &BBBBBB10, &99999910
	&	&99999910, &DDDDDD10, &00000090, &0000DD50
	&	&0000DD10, &99440010, &0000DD10, &99440010
	&	&00BBFF10
	&	4
	&	&20000000

	&	2
	&	&80
	FNS	("Throwback")
	&	&60
	&	&1201004D, &0200000F, &00000000, &00000000
	&	-1
	&	&00000010, &00000010, &FFFFFF10, &FFFFFF10
	&	&00000010, &FFFFFF10, &00000010, &00EEEE10
	&	&0000DD10, &00BBFF10, &00CC0010, &00EEEE10
	&	&0000DD10, &BBEEEEA0, &008855A0, &BBBBBBA0
	&	&999999A0, &77777710, &55555510
	&	4
	&	&00000000

	&	0	; end of list
defend$l

get_pointer_to_code_cols
 ADR R0,startofcolours$l
 MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Config block handling					    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X R0 = version block (pointing at major vsn no), or 0
;  Z flag set accordingly

find_version_block
	FNJSR	"R5,R6"
	FNLDR	R6,wimp_config
findver$l
	LDR	R5,[R6],#4
	TEQ	R5,#0
	FNRTS	EQ
	LDR	R0,[R5]
	CMP	R0,#-1
	BNE	findver$l
	ADDS	R0,R5,#8
	FNRTS

;E R0=Block type (1=options block 2,3=mode block)
;  R1=Mode number of block to read if R0=2,3
;X R0=-1 if block not found (+ve otherwise)
;  Block read in and removed from list.

read_given_config_block
 FNJSR "R1-R7"
 MOV R3,R0			; save block type
 MOV R4,R1			; and mode
 FNLDR R6,wimp_config
loop$l
 LDR R5,[R6],#4
 TEQ R5,#0
 MOVEQ R0,#-1
 FNRTS EQ
 LDR R0,[R5]
 TEQ R0,R3
 BNE loop$l			; not the correct type
 TEQ R0,#2
 TEQNE R0,#3
 BNE found$l			; not a mode block
 ADD R0,R5,#8			; mode name
 BL test_mode_name		; get number if loaded
 FNRTS VS
 TEQ R0,R4			; check its the correct mode
 BNE loop$l
found$l				; got the right block
 BL read_config_block		; read in the block
 FNRTS

 LOCAL

;E R5=pointer to a config file block
;X Block read in and deleted if it can be, skipped otherwise

read_config_block
 FNJSR "R1-R4,R6,R8-R11"
 LDR R0,[R5]			; block type
 CMP R0,#-1
 BEQ ver$l
 CMP R0,#1
 FNRTS LT			; end of the file
 BEQ opt$l			; standard block
 MOV R11,R0			; save block type for later
 ADD R0,R5,#8
 BL test_mode_name		; R0=mode num / -1 if not found
 FNRTS VS
 ADDS R8,R0,#0			; save mode number
 FNRTS MI
 ADD R0,R5,#8			; mode name
 BL str_len
 ADD R9,R5,R0
 TEQ R11,#2
 BEQ type2$l
 ADD R0,R9,#9			; clone name
 BL str_len
 ADD R9,R9,R0
 ADD R9,R9,#1			; skip extra NUL
type2$l
 ADD R9,R9,#12			; 8+1 term+3 align
 BIC R9,R9,#3			; Zap bit length ...
 LDR R10,[R9],#4		; length of Zap bit
 BL read_conf_mode_data
 FNRTS VS
 ADD R9,R9,R10			; Mode bit length ...
 LDR R10,[R9],#4		; length of mode bit
 MOV R0,R8
 BL read_mode			; R0=unlinked R1=linked
 LDR R0,[R1,#2*e_mode]		; mode num + flags
 TST R0,#emode_ModeWordIsBlock	; do we need to claim block?
 BNE claim$l
 CMP R10,#0
 LDRGT R0,[R9]
 ADDGT R1,R12,#opt_mode0
 STRGT R0,[R1,R8,LSL#2]		; store the word of data
 BL delete_config_block
 FNRTS
claim$l
 ADD R0,R10,#4			; length of block inc count word
 BL heap_claim
 FNRTS VS
 MOV R2,R0
 ADD R1,R12,#opt_mode0
 STR R2,[R1,R8,LSL#2]		; save pointer to the block
 ADD R0,R10,#4
 STR R0,[R2],#4			; save total block length
 MOV R1,R9
 MOV R3,R10
 BL move_bytes			; copy in the data
 BL delete_config_block
 MOV R0,R2
 FNRTS
opt$l				; main options block
 ADD R1,R5,#8
 ADD R2,R12,#opt_start
 MOV R3,#(opt_end-opt_start)
 BL move_bytes
 BL delete_config_block
 FNRTS
ver$l
 LDR R0,[R5,#4]
 BL heap_claim
 FNRTS VS
 MOV R1,R5
 MOV R2,R0
 LDR R3,[R5,#4]
 MOV R6,R0
 BL move_bytes			; copy in the data
 BL delete_config_block
 MOV R0,R6
 FNRTS

 LOCAL

;E R0=mode number to add block for / -1 for main global block
;    if b30 set then R1 = mode name (for cloning purposes)
;X Block added to end of config file & wimp_config updated
;  R14=new block

write_config_block
 FNJSR "R1-R5,R8-R11"
 ADDS R8,R0,#0			; R8=save mode number
 BMI opt$l			; do main block
 BIC R0,R0,#1<<30		; (the later LSL#2s on R8 are OK - b30 lost)
 BL read_mode			; R1=linked mode table
 MOV R14,#0
 CMP R1,#0			; was this a valid mode?
 FNRTS LE			; Mode not valid so exits
 ADD R0,R12,#opt_mode0
 LDR R4,[R0,R8,LSL#2]		; mode word contents
 LDR R10,[R1,#e_mode*2]		; mode flags
 TST R10,#emode_ModeWordIsBlock
 MOVEQ R11,#4			; size of the mode block
 BEQ a$l
 CMP R4,#0			; valid contents?
 FNRTS LE
 LDR R0,[R4]
 SUB R11,R0,#4			; size of the mode block
a$l				; R4=opt_moden R10=flags R11=mode blk len
 FNLDR R3,opt_modedata		; R1=linked mode table
 LDR R3,[R3,R8,LSL#2]		; pointer to my data for this mode
 LDR R0,[R3]
 BIC R0,R0,#&FF000000		; length of block (length word -> -1)
 ADD R0,R0,R11			; add length of mode block
 ADD R0,R0,#96;80;64		; 12+4+blk+4+blk=28+blks, plus space for name
 BL heap_claim
 FNRTS VS
 MOV R5,R0
 MOV R0,#3
 STR R0,[R5]			; block code
 TST R8,#1<<30
 LDREQ R2,[R1,#e_title*2]	; address of mode name
 LDRNE R2,[R13]			; or mode name from stack
 LDR R0,[R1,#d_clonebasemode]	; clone base number
 BL read_mode
 PUSH "R1"
 ADD R1,R5,#8
 BL strcopy			; copy in mode name
 PULL "R2"
 LDR R2,[R2,#e_title*2]		; clone base name
 BL strcopy			; copy in clone name
 ADD R1,R1,#3
 BIC R9,R1,#3			; next place to write (Zap block)
 BL write_conf_mode_data	; copy mode data
 FNRTS VS
 STR R11,[R9],#4		; size of mode block
 TST R10,#1<<10
 STREQ R4,[R9],#4		; mode word contents
 BEQ end$l
 ADD R1,R4,#4
 MOV R2,R9
 MOV R3,R11
 BL move_bytes
 ADD R9,R9,R11
end$l				; R5=block start R9=block end
 SUB R0,R9,R5			; block length
 STR R0,[R5,#4]			; save
 BL link_config_block		; link in config block
 MOV R14,R5
 FNRTS
opt$l				; do main options block
 CMN R0,#1
 BLT version$l
 MOV R3,#opt_end-opt_start
 ADD R0,R3,#16
 BL heap_claim
 FNRTS VS
 MOV R5,R0
 MOV R0,#1
 STR R0,[R5]
 ADD R1,R12,#opt_start
 ADD R2,R5,#8
 ADD R9,R2,R3
 BL move_bytes
 B end$l
version$l
 MOV R0,#20
 BL heap_claim
 FNRTS VS
 MOV R5,R0
 MOV R0,#-1
 STR R0,[R5]
 ADR R0,version_info$l
 LDMIA R0,{R0-R2}
 ADD R9,R5,#8
 STMIA R9!,{R0-R2}
 B end$l
version_info$l
 & version_major, version_minor, version_config

;E R0 -> mode name
;X R0 = pointer to type 3 block / 0

find_config_block
	FNJSR	"R1-R4"
	MOV	R4,R0
	FNLDR	R3,wimp_config
scan$l	LDR	R0,[R3],#4
	TEQ	R0,#0
	FNRTS	EQ
	LDR	R1,[R0]
	TEQ	R1,#3
	BNE	scan$l
	ADD	R1,R0,#8
	MOV	R2,R4
	BL	strCMP
	BNE	scan$l
	LDR	R0,[R3,#-4]
	FNRTS

	LOCAL

;E R0=pointer to config block
;X Config block copied; copy added to list

copy_and_link_config_block
	FNJSR	"R1-R5"
	MOV	R2,R0
	LDR	R0,[R2,#4]
	BL	heap_claim
	MOVVC	R1,R2
	MOVVC	R2,R0
	LDRVC	R3,[R1,#4]
	MOVVC	R5,R0
	BLVC	move_bytes
	BLVC	link_config_block
	FNRTS

	LOCAL

;E R5=pointer to config block
;X Config block added to list

link_config_block
	FNJSR	"R1-R3"
	FNLDR	R0,wimp_config
	SUB	R2,R0,#4
len$l	LDR	R1,[R2,#4]!
	TEQ	R1,#0
	BNE	len$l
	SUB	R2,R2,R0
	ADD	R1,R2,#8
	BL	heap_ensure
	FNSTR	R0,wimp_config,VC
	STRVC	R5,[R2,R0]!
	MOVVC	R1,#0
	STRVC	R1,[R2,#4]
	FNRTS

;E R5=pointer to config block
;X Config block deleted (if present)

delete_config_block
	FNJSR	"R1-R3"
	FNLDR	R3,wimp_config
scan$l	LDR	R0,[R3],#4
	TEQ	R0,#0
	FNRTS	EQ
	TEQ	R0,R5
	BNE	scan$l
	BL	heap_free
	MOVVC	R0,#0
shift$l	LDR	R1,[R3],#4
	STR	R1,[R3,#-8]
	TEQ	R1,#0
	BNE	shift$l
	TEQ	R0,#0
	FNRTS	EQ
	FNRTV

;E R5=pointer to mode data block
;X Block copied, R9 updated #

write_conf_mode_data
 FNJSR "R1-R5"
 MOV R4,R3			; source block
 LDR R5,[R4],#4			; block length etc
 MOV R3,R5,LSR#22		; size of mode data
 BIC R5,R5,#&FF000000		; actual block len (len word -> -1)
 STR R5,[R9],#4
 MOV R1,R4			; start of mode data
 MOV R2,R9
 ADD R9,R9,R3
 SUB R5,R5,R3			; length word + col data
 ADD R4,R4,R3			; start of colour data
 BL move_bytes
 MOV R0,#-1
 STR R0,[R9],#4
 MOV R1,R4
 MOV R2,R9
 SUB R3,R5,#4
 ADD R9,R9,R3
 BL move_bytes
 FNRTS

 LOCAL

;X Options block updated to new format

update_options
 FNJSR "R1-R5"
 BL find_version_block
 LDRNE R0,[R0,#8]
 TEQNE R0,#0			; version 0 config file, or no version block?
 ADREQL R0,halfword_config	; yes - need to add halfword mode info
 BLEQ copy_and_link_config_block
 FNLDR R0,opt_minicols
 TEQ R0,#0
 FNRTS EQ			; up to date
 AND R14,R0,#&F
 FNSTR R14,opt_minibac		; background wimp colour
 MOV R0,R0,LSR#8
 AND R0,R0,#&F
 FNSTR R0,opt_minifor		; foreground wimp colour
 MOV R0,#0
 FNSTR R0,opt_minicols		; this is now clear
 MOV R0,#1			; convert wimp to 24 bit
 ADD R1,R12,#red_flags		; redraw block
 ADD R2,R12,#opt_minibac
 MOV R3,R2
 MOV R4,#2			; 2 palette entries
 FNRTS VS
 SWI XZapRedraw_CreatePalette
 SUBS R14,R14,R14		; clv
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Startup						    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;X Environment string read to start of free memory #

init_envstring
 FNJSR "R1-R2"
 SWI XOS_GetEnv
 FNRTS VS
 MOV R2,R0			; environment string
 FNLDR R1,env_top
 FNSTR R1,env_string
 BL strcopy			; copy in the string
 ADD R1,R1,#4
 BIC R1,R1,#3
 FNSTR R1,env_top		; new env top
 FNRTS

 LOCAL

;X Looks at the environment string and loads any file after "Zap " WD #
;  Also runs the startup command (&322).

init_load
 FNJSR "R1-R5"
; BL env_noicon_check
; LDR R2,[R2,#8]
; CMP R2,#0
; FNRTS LE
; SWI &107
 FNLDR R5,env_string		; pointer to environment string
 LDR R0,[R5],#4			; get first word
 LDR R1,zap$l
 TEQ R0,R1
 FNPULL NE			; no match
 BNE startup_command$l

 MOV R0,R5
 BL str_len
loop1$l
 LDRB R14,[R5,R0]
 CMP R14,#32
 SUBLE R0,R0,#1
 BLE loop1$l
loop2$l
 LDRB R14,[R5,R0]
 CMP R14,#32
 SUBGT R0,R0,#1
 BGT loop2$l

 ADD R2,R5,R0
 ADD R2,R2,#1			; skipping that space...
 LDRB R14,[R2]
 CMP R14,#'-'
 CMPNE R14,#&20
 FNPULL LE			; no match
 BLE startup_command$l

;  MOV R5,R2
; skip$l
;  LDRB R0,[R5],#1
;  CMP R0,#&20
;  FNRTS CC			; no match
;  BEQ skip$l			; skip spaces
;  SUB R2,R5,#1			; start of filename

; LDRB R14,[R2]
; CMP R14,#&20
; FNRTS CC
 FNLDR R1,wimp_data
 MOV R3,#&100
 MOV R4,#&20			; low limit/terminator...? (was &20)
 BL strmove			; copy filename to buffer stripping spaces
 FNLDR R0,wimp_data
 BL install_file
 FNLDR R1,opt_switches
 TST R1,#switch_ExecuteStartCom
 BLNE startup_command$l
 FNRTS
zap$l = "Zap "

; Execute startup command
startup_command$l
 FNJSR "r0,r8-r10"
 MOV R8,#0
 MOV R9,#0
 MOV R10,#0			; no context to command
 FNLDR R0,startup_command
 ORR R0,R0,#command_DontLearn	; don't learn (should be irrelevant ...)
 BL command_string
 FNRTSS				; no error!

 LOCAL

;X Config file written and options saved

	DCD	7
Saveoptions
	FNJSR
	MOV	R10,R13
prefindver$l
	BL	find_version_block
	BEQ	donever$l
	SUB	R5,R0,#8
	BL	delete_config_block	; delete version block if found
	B	prefindver$l		; any duplicates? (hope not...)
donever$l
	MOV	R4,#-2			; first block to add in
	MOV	R0,#0
	PUSH	"R0"
su10	MOV	R0,R4			; block to add
	BL	write_config_block	; add it
	BVS	ret$l
	TEQ	R14,#0
	PUSH	"R14",NE
	ADD	R4,R4,#1		; next mode
	CMP	R4,#max_mode
	BLT	su10
	FNLDR	R6,wimp_config
	MOV	R0,#8			; find config file size
size$l	LDR	R1,[R6],#4
	TEQ	R1,#0
	LDRNE	R1,[R1,#4]
	ADDNE	R0,R0,R1
	BNE	size$l
	BL	heap_claim
	MOVVS	R11,#0
	BVS	free$l
	MOV	R7,R0
	MOV	R11,R0
	LDR	R0,prefix$l
	FNLDR	R6,wimp_config
	STR	R0,[R7],#4
copy$l	LDR	R1,[R6],#4
	TEQ	R1,#0
	BEQ	copied$l
	MOV	R2,R7
	LDR	R3,[R1,#4]
	ADD	R7,R7,R3
	BL	move_bytes
	B	copy$l
copied$l
	MOV	R0,#&0A
	ADR	R1,file$l
	MOV	R2,   #&F00
	ORR	R2,R2,#&0FD		; data file type
	MOV	R3,#0
	STR	R3,[R7],#4		; write config file end marker
	MOV	R4,R11
	MOV	R5,R7
	SWI	XOS_File		; write the file
free$l	MOVVC	R4,#0
	MOVVS	R4,R0
	MOV	R0,R11
	BL	heap_free
freeloop$l
	PULL	"R5"
	TEQ	R5,#0
	BEQ	donefree$l
	BL	delete_config_block
	B	freeloop$l
donefree$l
	MOV	R0,R4
ret$l	MOV	R13,R10
	TEQ	R0,#0
	FNRTS	EQ
	FNRTV
prefix$l =	"Conf"
file$l	=	"<",|zap$|,"$Options>",0
	ALIGN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some error code						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; generate an error block, with error number offset $a and message $b

	MACRO
$la	FNerr $a,$b
$la	ADD R0,PC,#0			; address of the error message
	B lookup_error			; return with an error
	DCD (ENUM+$a)			; the error number
	= $b,0
	ALIGN
	MEND

err3 FNerr 3,("zap_e_badnum")
err12 FNerr 12,("zap_ReadOnly")
err23 FNerr 23,("zap_e_invmode")
err41 FNerr 41,("zap_e_wrongtype")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Helpful error messages				    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;E R0=file object type R1=file name
;X If object cannot have file type operations done then
;  error formed in WD #

check_object_type
 TST R0,#1
 MOVNE PC,R14			; is a file
 FNJSR "R1-R7"
 MOV R3,R0			; save object type
 MOV R4,R1			; source name
 TST R3,#2
 ADREQ R0,notfound$l
 ADRNE R0,directory$l
 MOV R2,#0
 BL lookup_error
 FNRTS
notfound$l
 & ENUM+2
 FNS ("zap_e_notfound")
directory$l
 & ENUM+2
 FNS ("zap_e_isadir")

 LOCAL

;E R0=error message R1=string to append to error message
;X R0=error message + ": " + string in WD and V flag set #

generate_error
 FNJSR "R1-R3"
 MOV R3,R1
 FNLDR R1,wimp_data
 MOV R2,R0
 LDR R0,num$l
 STR R0,[R1],#4
 BL strcpy
 ADR R2,fill$l
 BL strcpy
 FNLDR R0,wimp_data
 SUB R0,R1,R0
 RSB R0,R0,#256
 MOV R2,R3
 BL strbuf
 FNPULL
 FNLDR R0,wimp_data
 ORRS PC,R14,#Vbit
num$l  DCD ENUM
fill$l FNS (": ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Load file listing external file objects		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X External file loaded and contents stored

init_external
 FNJSR "R1"
 ADR R0,sub$l
 ADR R1,fname$l
 BL str_readfile
 FNRTS
fname$l = "<",|zap$|,"$External>",0
 ALIGN
sub$l				; R10=pointer to external file ended by a 0
 FNJSR "R1-R4,R10"
line$l				; next line loop
 LDRB R0,[R10]
 TEQ R0,#0
 FNRTS EQ			; end
 CMP R0,#'|'			; comment?
 CMPNE R0,#&20			; or starts with a space/tab or is empty?
 BLE next$l			; if so...
 MOV R0,R10
 BL str_len			; length of the line
 CMP R0,#2
 BLT next$l			; invalid
 ADD R1,R10,R0
 LDRB R14,[R1,#-1]
 TEQ R14,#'*'
 LDREQB R14,[R1,#-2]
 TEQEQ R14,#&20
 MOVEQ R14,#10
 STREQB R14,[R1,#-2]		; partition off any *'s
 ADD R0,R0,#2			; include terminator(s)
 BL heap_claim
 FNRTS VS
 MOV R4,R0			; save the buffer address
 PUSH "R4"
 MOV R2,R10
 MOV R1,R4
 MOV R3,#&100
 MOV R4,#&20
 BL strmove			; copy the file name
 PULL "R4"
 BL str_jump			; jump to next argument
 ADD R1,R1,#1
 MOV R3,R1			; save start of second argument
 MOV R2,R10
 BL strcopy			; copy the second arg (if there is one)
 BL str_next			; start of next line
 LDRB R0,[R10]
 TEQ R0,#'*'
 BEQ start$l			; start the mode now
 PUSH "R3,R4"
 SUB R10,R10,#1			; re-read this line
 MOV R3,#0			; current extension type (mode names atm)
object$l			; next object loop
 BL str_next			; start of next line
 BCS eof$l			; end of file
 MOV R1,R10
 BL str_skip			; skip spaces and tabs
 CMP R1,R10
 PULL "R3,R4",EQ
 BEQ line$l			; weren't any to skip - not indented
 LDRB R0,[R10]
 TEQ R0,#'-'
 ADDEQ R3,R3,#1			; onto the next object type
 BEQ object$l
 TEQ R3,#0
 BNE notmode$l
 FNLDR R1,default_mode
 MOV R2,R10
 BL strCMPstr			; does this module contain the default mode?
 BNE notmode$l
 LDRB R0,[R0]
 CMP R0,#32
 PULL "R3,R4",LE		; if so, load it
 BLE start$l
notmode$l
 BL add_external_object
 BVC object$l
eof$l
 PULL "R3,R4"
 FNRTS
next$l				; skip to start of next line
 BL str_next
 B line$l
start$l				; load the module and do a command
 LDRB R0,[R3]
 CMP R0,#&20
 MOVGT R0,R3
 SWIGT XWimp_StartTask		; do the command if there is one
 MOVVC R0,#1
 MOVVC R1,R4
 SWIVC XOS_Module		; load the module
 MOVVC R0,R4
 BLVC heap_free
 FNRTS VS
 B next$l			; move onto next module

 LOCAL

; ext_modes,ext_comms,ext_messages contain 0 termianted lists
; of mode names,command names,messages numbers (the first two followed
; by zeros 'till the next alignment) followed by a pointer to the module
; file to load to install that mode, command etc (zero if freed)
; The module file name is of the form <module name>,0,<extra file>,0
; The extra file will be Wimptasked before the module is loaded.
;
; Each mode name is followed by a flags word (the same as is stored in its
; e_flags entry). If the word isn't specified in the file, then &80000000 is
; used to indicate this.
;
; Each command name is followed by a flags word (the same as is stored
; immediately before the command's entry point). If the word isn't specified
; in the file, then &80000000 is used to indicate this.

;E R10=pointer to mode/command name/message number string
;  R3=object type (0=mode 1=command 2=message 3=clone mode)
;  R4=pointer to name of module to load to deal with this command/mode/mess
;     or the clone base mode (if R3=3)
;X Object added #

add_external_object
 FNJSR "R1-R6,R10"
 CMP R3,#3
 FNRTS CS			; illegal type
 ADR R14,list$l
 LDR R2,[R14,R3,LSL#2]
 LDR R5,[R12,R2]		; list pointer
 MOV R1,R5
findend$l
 LDR R0,[R1]
 TEQ R0,#0
 BEQ found$l
 TEQ R3,#2
 ADDEQ R1,R1,#8
 BEQ findend$l
a$l
 LDRB R0,[R1],#1
 TEQ R0,#0
 BNE a$l
 TEQ R3,#0
 ADDEQ R1,R1,#4
 ADD R1,R1,#7
 BIC R1,R1,#3			; align + skip the address
 B findend$l
found$l
 SUB R6,R1,R5			; current list length
 MOV R0,R10
 TEQ R3,#2
 MOVEQ R0,#4
 BLNE str_len			; R0=length of argument
 ADD R1,R6,R0
 ADD R1,R1,#24+63		; +term (+modeflags) +addr +listterm
 BIC R1,R1,#63			; align to next 64 boundry
 MOV R0,R5
 BL heap_ensure
 FNRTS VS
 STR R0,[R12,R2]		; new list pointer
 ADD R1,R0,R6			; start of the entry
 TEQ R3,#2
 BEQ num$l
copy$l				; copy the string (make upper case if comm)
 LDRB R0,[R10],#1
 TEQ R3,#1			; command ?
 BNE c$l			; no
 SUB R14,R0,#'a'
 CMP R14,#26
 ADDCC R0,R14,#'A'		; convert to upper case
c$l
 CMP R0,#&20
 STRGTB R0,[R1],#1
 BGT copy$l			; do next byte
 MOV R0,#0
b$l
 STRB R0,[R1],#1		; add terminator
 TST R1,#3
 BNE b$l			; until aligned
 CMP R3,#1			; mode or command?
 BHI end$l			; no
 BL str_skip
 FNRTS VS
 BL str_readnum
 MOVVS R0,#&80000000		; if there's an error
 TEQ R3,#0
 STREQ R0,[R1],#4
 BEQ end$l
 MOV R2,R0
 MOV R3,R1
 FNLDR R0,ext_comm_flags	; flags words list:
 MOV R1,#4
 BL heap_extend
 FNRTS VS
 LDR R1,[R0]
 FNSTR R0,ext_comm_flags
 STR R2,[R0,R1]			; write flags word
 ADD R1,R1,#4
 STR R1,[R0]
 MOV R1,R3
 B end$l
num$l
 BL str_readnum
 FNRTS VS
 STR R0,[R1],#4
end$l
 MOV R14,#0
 STMIA R1,{R4,R14}		; address of filename, terminator
 FNRTS
list$l
 DCD ext_modes
 DCD ext_comms
 DCD ext_messages

 LOCAL

;E R0=address of module name to remove (it has now been loaded)
;  Never want to try loading something twice!!
;X Object removed from external lists (or replaced with 0) so it's never
;  again loaded. Heap block containing name is freed.

remove_external_object
 FNJSR "R1-R5"
 MOV R4,R0			; save pointer to module name
 MOV R5,#8
 FNLDR R1,ext_modes		; remove from external modes
 BL sub$l
 FNLDR R1,ext_comms		; remove from external commands
 BL sub$l
 MOV R5,#4
 FNLDR R1,ext_clones		; remove from clones list
 BL sub$l
 FNLDR R1,ext_messages
a$l
 LDMIA R1!,{R0,R14}
 CMP R0,#0
 BLE end$l
 TEQ R14,R4
 MOVEQ R14,#0
 STREQ R14,[R1,#-4]
 B a$l
end$l
 MOV R0,R4
 BL heap_free
 FNRTS
sub$l				; string handling
 FNJSR
b$l
 MOV R0,R1
 BL str_len
 CMP R0,#0
 FNRTS LE			; reached the end
 ADD R1,R1,R0
 ADD R1,R1,R5
 BIC R1,R1,#3
 LDR R0,[R1],#4
 TEQ R0,R4
 MOVEQ R14,#0
 STREQ R14,[R1,#-4]
 B b$l

	LOCAL

;X Clone modes added to external list

init_clones
	FNJSR	"R1-R5"
	FNLDR	R5,wimp_config
loop$l	LDR	R0,[R5],#4
	TEQ	R0,#0
	FNRTS	EQ			; return if no more blocks
	LDR	R1,[R0]
	TEQ	R1,#3
	BNE	loop$l			; not type 3
	ADD	R1,R0,#8
	MOV	R2,R1			; mode name
skip$l	LDRB	R0,[R1],#1		; find clone base name
	TEQ	R0,#0
	BNE	skip$l
	BL	strCMP
	LDRNE	R0,[R5,#-4]
	ADDNE	R1,R0,#8
	BLNE	add_clone_mode_entry	; if names differ, add to list
	BVC	loop$l
	FNRTS

	LOCAL

;E R1 -> mode name, \0, clone base name
;X clone mode entry added

add_clone_mode_entry
	FNJSR	"R1-R5"
	FNLDR	R2,ext_clones
findend$l
	LDR	R3,[R2],#4
	TEQ	R3,#0
	BNE	findend$l
	FNLDR	R0,ext_clones
	SUB	R2,R2,R0
	ADD	R1,R2,#4
	BL	heap_ensure
	FNRTS	VS
	FNSTR	R0,ext_clones
	MOV	R1,#0
	STR	R1,[R2,R0]!
	LDR	R1,[R13]
	MOV	R0,R1
	BL	str_len
	ADD	R3,R0,#1
	ADD	R0,R1,R3
	BL	str_len
	ADD	R3,R3,R0
	ADD	R3,R3,#1
	MOV	R0,R3
	BL	heap_claim
	FNRTS	VS
	STR	R0,[R2,#-4]
	MOV	R1,R0
	LDR	R2,[R13]
	BL	strcopy
	BL	strcopy
	FNRTS

	LOCAL

;E R1 -> mode name
;X R0 -> clone base mode name / 0 if not found
;  R1 -> mode name (in list)

find_clone_mode_entry
	FNJSR	"R1-R3"
	FNLDR	R3,ext_clones
loop$l	LDR	R0,[R3],#4
	TEQ	R0,#0
	FNRTS	EQ
	MOV	R1,R0
	LDR	R2,[R13]
	BL	strCMP
	BNE	loop$l
	LDR	R0,[R3,#-4]
	MOV	R1,R0
skip$l	LDRB	R2,[R0],#1
	TEQ	R2,#0
	BNE	skip$l
	STR	R1,[R13]
	FNRTS

	LOCAL

;E R1 -> mode name
;  R2 = 0 to delete, non-0 to hide
;X if found in the clones list:
;    mode removed from clones list, config block deleted if not already read
;    if instantiated then mode is marked as deleted (but remains available)
;  error if not a clone or not found

remove_clone_mode_entry
	FNJSR	"R1-R7"
	BL	find_clone_mode_entry
	TEQ	R0,#0
	BEQ	nodel$l
	LDR	R0,[R13]
	BL	test_mode_name
	MOVS	R5,R0			; mode instantiated?
	BMI	notinstantiated$l
	BL	read_mode
	LDRB	R0,[R1,#d_clonebasemode]
	TEQ	R0,R5			; yes - is it a clone?
	BEQ	nodel$l			; ...no
	FNLDRB	R0,opt_format		; is it the default mode?
	TEQ	R0,R5
	BEQ	inuse$l			; ...yes
	MOV	R1,#0
	ADR	R10,checkuse$l
	BL	do_allwindow		; is it in use?
	TEQ	R1,#0
	BNE	inuse$l			; ...yes
	LDR	R2,[R13,#4]
	TEQ	R2,#0
	BEQ	noconf$l
	MOV	R0,R5			; if we're hiding the mode,
	BL	write_config_block	; preserve its config block
	FNRTS	VS
noconf$l
	FNADD	R4,R12,mode_store	; otherwise, free up its mode number
	ADD	R4,R4,R5,LSL #3
	LDMIA	R4,{R0,R3}
	MOV	R1,#0
	STR	R1,[R4]
	STR	R1,[R4,#4]
	BL	heap_free
	LDR	R0,[R3,#2*e_mode+4]
	BL	heap_free
	MOV	R0,R3
	BL	heap_free
	LDR	R2,[R13,#4]
	TEQ	R2,#0
	FNRTS	NE			; if hiding, return now
forget$l
	LDR	R1,[R13]
	BL	find_clone_mode_entry
	FNLDR	R3,ext_clones		; completely forget about this mode
	MOV	R4,R3
loop$l	LDR	R2,[R3],#4
	TEQ	R2,R1
	STRNE	R2,[R4],#4
	TEQ	R2,#0
	BNE	loop$l
	MOV	R0,R1
	BL	heap_free
	FNRTS
notinstantiated$l
	FNLDR	R1,wimp_kbdbuf
	LDR	R2,[R13]
	MOV	R3,#256
	MOV	R4,#32
	BL	strmove			; copy clone name into wimp_kbdbuf
	FNLDR	R0,wimp_kbdbuf
	BL	find_config_block	; is there a config block for it?
	MOVS	R5,R0
	BEQ	nodel$l
	ADD	R1,R5,#8
	MOV	R2,R1
s1$l	LDRB	R0,[R2],#1
	TEQ	R0,#0
	BNE	s1$l
	BL	strcmp			; do the names match?
	BEQ	nodel$l			; if so, then not a clone -> error
	LDR	R1,[R13,#4]
	TEQ	R1,#0
	FNRTS	NE			; if hiding, then nothing to do
	BL	delete_config_block	; else delete the mode's config block
	B	forget$l		; and completely forget about it
nodel$l	ADR	R0,nodelmsg$l
	LDR	R4,[R13]
	BL	lookup_error
	FNRTS
nodelmsg$l &	0
	FNS	("zap_e_delclone")
inuse$l	ADR	R0,inusemsg$l
	LDR	R4,[R13]
	BL	lookup_error
	FNRTS
inusemsg$l &	0
	FNS	("zap_e_cloneinuse")
checkuse$l
	LDRB	R0,[R8,#w_format]	; clone mode in use?
	TEQ	R0,R5
	MOVEQ	R1,#1
	MOVS	PC,R14

 END
