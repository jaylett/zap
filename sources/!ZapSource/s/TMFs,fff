; Contains TMF (configuration) variable code.
; $Id: TMFs,fff,v 1.1.2.3 1999/05/30 18:36:32 ds Exp $

	GET	h.ZapHeader
	GET	h.Strings
	GET	h.Heap
	GET	h.ModeBits

	EXPORT	Getvar
;	EXPORT	Setvar

	EXPORT	get_mode_variable
	EXPORT	free_tmfs

	LOCAL
; @GETVAR "variable-name"
	DCD	c_NoR10 :OR: c_Function :OR: c_FunctionParam_String
Getvar	CMP	r2,#23
	MOVNE	pc,r14

	FNJSR
	BL	get_mode_variable		; \X r0 - must duplicate to use, since command system will free it
	MOVS	r1,r0
	BLNE	strdup				; \X r0, or VS
	MOVVS	r0,#0
	MOV	r1,#3				; string
	FNRTSS					; clear flags, because internally they get scragged up

; SETVAR "variable-name = value"
; Yet to be written :-)

; ADDITIONAL FEATURES
;  variable substitution
;  per-file variables
;  SetVar	sets a variable per-file
;  DumpVars	dumps all file- or mode- vars
;		in a set of SetVar commands
;
; This consists of three distinct parts:
;
; (1) per-mode variables loaded from TMFs, allowing
;     interpolation and inheritance
; (2) per-file variable overrides, set by the user
; (3) glue to bind them together and pluck out the
;     relevant values when requested by a client.
;     This code is exported as a Zap_ call, and
;     may in the future include additional calls to
;     allow substitution within variables, a la
;     MessageTrans.
;
; TMFs themselves are MessageTrans-read files.
;
; Within this file, \V in the call header indicates
; that the call may return VS.
;
; The variable table (pointer stored at d_variabletable in
; the mode dispatch table) consists of pairs of pointers
; (variable name, value), ending with (0,0).
;
; The first pair is actually (num_entries, table_size),
; both numbers being in entries. The following constants
; define how the table is grown, and the layout of the table.
; An entry is a single pair; num_entries includes the two
; 'pseudo entries' at the start and end of the table.
; size_of_table gives the total available size in the table
; (ie the size we asked for from the heap / 8).

vartable_entrysize	*	8
vartable_pagesize	*	16
vartable_pagesize_BYTES	*	(vartable_pagesize * vartable_entrysize)

vartable_num_entries	*	0
vartable_table_size	*	4
vartable_first_entry	*	8
vartable_varname	*	0
vartable_varvalue	*	4

; vt_top $a, $b
; $a contains the variable table pointer
; $b is where to put the result, being
; the *address* of the *start* of the (0,0)
; pair.
	MACRO
	vt_top	$a, $b
	LDR	$b, [$a, #vartable_num_entries]
	SUB	$b, $b, #1			; skip pseudo-entry
	ADD	$b, $a, $b, LSL #3
	MEND

; \E r0 variable name, r8, optionally r9
; \X r0 result / 0 and Z set
;    IMPORTANT: V does *not* indicate an error condition. Don't test it;
;    you will most likely have r0 = 0 at the same time.
;
; The variable name will be copied when stored in the variable table.
; You should copy the result if you want to use it (unless you've used
; substitution), because it will be the pointer straight into the variable
; table. In particular, freeing this will cause *lots* of problems ...
get_mode_variable
	CMP	r8,#0
	MOVEQ	r0,#0
	MOVEQ	pc,r14

	FNJSR

	CMP	r9,#0
	BLNE	get_var_from_file	; Z set if nothing, and PRESERVES r0
	FNRTS	NE			; returned a result

	CMP	r8,#0
	MOVEQS	r0,#0			; no way of getting a result

	BLNE	get_var_from_mode

	FNRTS

; !!! This bit hasn't been written yet. It requires an additional f_
; !!! entry, which I don't want to do until it's necessary.
;
; \E r0 variable name, r8/r9
; \X r0 result / Z set and r0 preserved
get_var_from_file
	CMP	r0,r0			; set Z
	MOV	pc,r14

	LOCAL
; \E r0 variable name, r1 mode number
; \X r0 result / 0 and Z set
;
; Used only internally, to provide interpolation.
get_var_from_given_mode
	FNJSR	"r1-r3,r5"
	MOV	r2,r0
	MOV	r0,r1
	B	get_var_from_given_mode$l

; \E r0 variable name, r8
; \X r0 result / 0 and Z set
get_var_from_mode
	FNJSR	"r1-r3,r5"
	MOV	r2,r0			; store
	LDRB	r0,[r8,#w_format]	; get mode numer

; \E r0 mode, r2 variable name, !!! return r1-r3,lr stacked
; \X r0 result / 0 and Z set
get_var_from_given_mode$l
	BL	read_mode
	CMP	r1,#0
	BLE	nope$l			; mode doesn't exist
	LDR	r0,[r1,#d_variabletable]
					; space in qualified mode table for variables
					; r1 is now the current variable table pointer
	CMP	r0,#-1
	BNE	var_table$l
	BL	get_var_from_tmf	; no variable table for this mode
	BEQ	get_from_parent		; for this, must take above branch and return Z
					; => this variable doesn't exist in TMF
	FNRTS				; got a variable from the TMF; Z must be clear

; !!! This bit isn't pretty; it does too much stacking / using high registers.
; !!! ... but I can't think of a neater way of doing it without rewriting strcmp
; !!! or something equally hideous. At least it should be fairly fast this way ...
;
; \E r0 variable table, r1 mode dispatch table, r2 variable name, !!! return r1-r3,lr stacked
; \X r0 result / 0 and Z set
var_table$l
	PUSH	"r4-r7"			; need some more space
	ADD	r4,r0,#vartable_first_entry
	MOV	r5,r0			; store it ...
	MOV	r6,r2			; store it ...
	MOV	r7,r1			; store it ...
vt_loop$l
	MOV	r1,r6			; restore
	LDMIA	r4!,{r2-r3}		; load the first pair
	CMP	r2,#0
	BEQ	nomatch$l
	BL	strcmp			; r0-r2 corrupted, Z => equality
	BNE	vt_loop$l
	B	match$l

; \E r4-r6 stacked
; Must call other routines with:
; 	r0 variable table, r1 mode dispatch table, r2 variable name
nomatch$l
	MOV	r0,r5
	MOV	r2,r6
	MOV	r1,r7
	PULL	"r4-r7"
	BL	get_var_from_tmf	; this variable doesn't exist
	BEQ	get_from_parent		; TMF didn't help either
	FNRTS				; got a variable from the TMF; Z must be clear

; \E r3 value, r4-r6 stacked
match$l
	PULL	"r4-r7"
	MOVS	r0,r3			; output - sets Z appropriately
	FNRTS				; result!

nope$l	MOVS	r0,#0			; SEZ
	FNRTS

; \E r1 mode dispatch table, r2 variable name, !!! return r1-r3,lr stacked
; Call get_var_from_given_mode$l with r0 the basemode.
get_from_parent
	LDR	r0,[r1,#d_clonebasemode]; clone base mode number
	LDRB	r14,[r1,#2*e_mode]	; this mode number (hope!)
	CMP	r0,r14
	BNE	get_var_from_given_mode$l
	LDR	r0,[r1,#2*e_basemode]	; basemode number
	CMP	r0,r14
	BNE	get_var_from_given_mode$l
	MOV	r0,#0			; reached top of inheritance table
	FNRTS				; so just return "shrug"

	LOCAL
; \E r0 variable table, r1 mode dispatch table, r2 variable name
; \X r0 result / 0 and Z set
;    side effects: variable may have been stored in variable table,
;    which may have been created; TMF may have been opened
get_var_from_tmf
	FNJSR	"r1-r4,r9"
	FNADD	r3,r12,opt_TMFbase	; base of TMF MessageTrans pointer block
	LDRB	r4,[r1,#e_mode * 2]	; mode number (no flags)
	MOV	r9,r1			; long-term store ...
	LDR	r3,[r3,r4,LSL #2]	; TMF MessageTrans pointer block for this mode

	CMP	r3,#-1
	MOVEQ	r0,#0
	FNRTS	EQ			; no TMF available

	CMP	r3,#0
	BLEQ	load_tmf$l		; currently unloaded

	CMP	r3,#-1
	MOVEQ	r0,#0
	FNRTS	EQ			; Z set as required

; r3 -> TMF MessageTrans block
; r0 variable table, r1 mode dispatch table, r2 variable name
	PUSH	"r0-r2"
	MOV	r0,r3			; MT block
	MOV	r1,r2			; variable name (ie: MT token)
	MOV	r2,#0			; we'll copy it ourselves when we know how big it is
	MOV	r3,#0			; no space in buffer
	SWI	XMessageTrans_Lookup
	BVS	gotnothing$l

; The following contains the interpolation code. It's rather messy with its
; use of stacking, and doesn't use registers r5-r8 and so could probably be
; tidied up a lot :-(
	MOVS	r0,r3			; size of result
	BEQ	gotnothing$l
	ADD	r0,r0,#1		; include terminator
	MOV	r3,r0			; store actual size of buffer
	BL	heap_claim		; get a buffer for it
	BVS	gotnothing$l

; r0 buffer, r2 source, r3 uninterpolated size, r1 and r4 available
; r9 mode dispatch table
; On exit, r4 must point to the start of the destination buffer (whatever that is
; by then). r0-r3 may be corrupted (r3 is trashed shortly afterwards, and r0-r2
; are pulled).
	MOV	r4,#-1
interpolate$l
	ADD	r4,r4,#1
	CMP	r4,r3
	MOVGE	r1,#0
	SUBGE	r4,r4,#1		; note: -1 because otherwise we overrun
	STRGEB	r1,[r0,r4]		; this is a precaution; should never happen!
	BGE	done_interpolation$l

	LDRB	r1,[r2],#1
	CMP	r1,#0
	CMPNE	r1,#10			; MessageTrans will probably terminate like this :-(
	MOVEQ	r1,#0			; ensure the terminator is correct
	STREQB	r1,[r0,r4]
	BEQ	done_interpolation$l

	CMP	r1,#'\'
	BNE	no_escape$l
	LDRB	r1,[r2],#1		; the character that was escaped
	CMP	r1,#0
	CMPNE	r1,#10			; terminator of string
	STRNEB	r1,[r0,r4]
	BNE	interpolate$l

	MOV	r1,#'\'			; can't have been escaped
	STRB	r1,[r0,r4]		; nothing left to read, so just write this
	MOV	r1,#0
	ADD	r4,r4,#1
	CMP	r4,r3
	SUBGE	r4,r4,#1		; run out of buffer space (should never happen)
	STRB	r1,[r0,r4]		; and a terminator
	B	done_interpolation$l	; and leave it at that

no_escape$l
	CMP	r1,#'/'
	STRNEB	r1,[r0,r4]
	BNE	interpolate$l

; Do an interpolate action
;
; !!! FIXME: currently writes to read-only string! Need to use a temporary buffer
; !!! to copy the modename and variable names. Grr, owl, etc.
;
; r2 points to the start of the interpolation command (eg for /Text/, r2 -> 'T').
; At end, we must have (a) jumped r2 over the interpolation command, (b) performed
; it (which involves calling get_var_from_given_mode).

; !!! Remember that at this point, the stack contains {r0-r2}
; !!! from earlier - which is the variable name. We'll need to grab r2 from this
; !!! in order to call get_var_from_given_mode successfully.

; First, we need to extract the mode number, if any.
	PUSH	"r3,r4"			; don't stack r2, because it gets updated here
	MOV	r4,r0			; use r4 to store r0
	LDRB	r0,[r2]

	CMP	r0,#'/'			; nothing specified - skip it
	ADDEQ	r2,r2,#1
	MOVEQ	r0,r4			; get things back ready for the loop
	BEQ	interpolate_stop$l

	CMP	r0,#':'			; no mode specified
	LDREQB	r1,[r9,#e_mode * 2]	; our mode number
	BEQ	gotmode$l

	CMP	r0,#'@'			; special: means "this mode"
	LDREQB	r1,[r9,#e_mode * 2]
	ADDEQ	r2,r2,#1		; skip it
	BEQ	gotmode$l

	CMP	r0,#'^'
	LDREQB	r1,[r9,#e_basemode * 2]
	ADDEQ	r2,r2,#1		; skip it
	BEQ	gotmode$l

; r2 points to a valid (presumably) mode name - convert into a mode number
;	MOV	r0,r2			; for call to Zap_ModeNumber
	ADRL	r0,sysvar_result	; fixed buffer to plonk mode name in
term_mode$l
	LDRB	r1,[r2]
	CMP	r1,#':'
	CMPNE	r1,#'/'
	CMPNE	r1,#0
	CMPNE	r1,#10
	ADDNE	r2,r2,#1		; increment (gotmode$l expects r2 on term/sep)
	STRNEB	r1,[r0],#1
	BNE	term_mode$l
	MOV	r1,#0
	STRB	r1,[r0]

	ADRL	r0,sysvar_result

	BL	find_mode_number	; \X r0 = mode number, or -1
	MOVS	r1,r0
	BGE	gotmode$l		; got a mode number

	LDRB	r0,[r2]
	CMP	r0,#0
	CMPNE	r0,#10
	ADDNE	r2,r2,#1		; skip terminator - more of string left
	MOV	r0,r4			; restore buffer
	B	interpolate_stop$l	; bottle out - can't do anything

; r1 is the mode number
; r2 points to the separating ':', or to '/' if no variable specified
gotmode$l
	LDRB	r0,[r2]
	CMP	r0,#'/'			; so will skip inserted terminators from term_mode$l
	CMPNE	r0,#0
	CMPNE	r0,#10
	ADDNE	r2,r2,#1		; if so (either "...:/" or no variable name at all)
					; then use current variable name
	BEQ	default_var$l

	LDRB	r0,[r2]
	CMP	r0,#'/'			; was ':/' - default variable
	CMPNE	r0,#0
	CMPNE	r0,#10
	BEQ	default_var$l
	; Not, so we have a variable name there. Find the terminator
;	MOV	r0,r2			; start of the variable name
	ADRL	r0,sysvar_result
term_var$l
	LDRB	r3,[r2]
	CMP	r3,#'/'
	CMPNE	r3,#0
	CMPNE	r3,#10
	ADDNE	r2,r2,#1
	STRNEB	r3,[r0],#1
	BNE	term_var$l

	MOV	r3,#0
	STRB	r3,[r0]
	ADRL	r0,sysvar_result
	B	gotvariable$l

	; The stack looks like: {r0-r2}, {r3,r4}, and we want r2.
	; The stack is actually: [r3,r4,r0,r1,r2] with r13 -> [r3]
	; so r2 is at r13 + #16
	; Also, we're only here if we're looking
	; test r1 against our own mode number to prevent loops
default_var$l
	LDRB	r0,[r9,#e_mode * 2]	; our mode number
	CMP	r0,r1
	LDRNE	r0,[r13,#16]		; get the variable name
	BNE	gotvariable$l

	LDR	r0,[r2]			; again ...
	CMP	r0,#'/'
	ADDEQ	r2,r2,#1		; skip it (otherwise on a terminator already)
	MOV	r0,r4			; restore buffer
	B	interpolate_stop$l	; no valid variable; otherwise we loop!

; read the variable. \E r0 variable name, r1 mode number
; Everything we need is stacked already.
gotvariable$l
; r2 may point to the interpolation terminator, so fix that
; r3 is currently free, so use that ...
	LDRB	r3,[r2]
	CMP	r3,#0
	CMPNE	r3,#10
	ADDNE	r2,r2,#1		; don't walk off the end of strings!
	BL	get_var_from_given_mode	; do lookup

; Now we need to write this into the output buffer.
; r0 = 0 or variable value; r4 contains buffer to put it in
; r2 must be preserved
; r3,r4 stacked are the current size of the buffer, and the write
; offset into the buffer.
	MOV	r1,r0			; variable value (or 0)
	MOV	r0,r4			; output buffer
	PULL	"r3,r4"
; At this point, we're safe - everything's set up for us to simply
; drop back into the loop.
	CMP	r1,#0			; this is actually unnecessary (get_var... sets Z)
	BEQ	interpolate$l		; no value to interpolate

; Having got ourselves back into position, we need to stack again
; because we need to do various things with low registers
; \E r0 (original) output buffer, r1 variable value, r2 source pointer,
;    r3 (original) buffer length, r4 write offset into output buffer
	PUSH	"r0,r3,r4"		; output buffer, buffer size, write offset
	MOV	r5,r4
	MOV	r4,r0			; output buffer
	MOV	r0,r1			; variable value
	BL	str_len			; \X r0 length of value to interpolate
	ADD	r0,r0,#1		; include a terminator
	ADD	r3,r3,r0		; new size of buffer
	MOV	r0,r4			; output buffer to play with
	MOV	r4,r1			; variable value
	MOV	r1,r3
	BL	heap_ensure
	BVS	oops_interpolate$l	; couldn't extend buffer
; r0 new destination buffer
; r3 size of destination buffer, r2 source pointer as required.
; r4 variable value, r5 write offset into buffer
	MOV	r1,r4
	MOV	r4,r5
;	LDR	r4,[r13,#0]		; top of stack
	ADD	r13,r13,#12		; discard stack - don't PULL from here on
; r1 variable value, r4 write offset into buffer
	PUSH	"r2"			; store this
copy_val$l
	LDRB	r2,[r1],#1
	STRB	r2,[r0,r4]
	CMP	r2,#0
	ADDNE	r4,r4,#1
	BNE	copy_val$l

	SUB	r4,r4,#1		; because the interpolate$l loop increments this
					; at the start, so we have to be prepared to be
					; incremented to find the next place to go. Note that
					; we are currently terminated (NUL will have been stored)
					; but that in the case of anything after the
					; interpolation, this NUL will be overwritten
	PULL	"r2"
	B	interpolate$l

; Something went wrong ...
; r0, r3, r4 have been corrupted
oops_interpolate$l
	PULL	"r0,r3,r4"
	SUB	r4,r4,#1		; because we increment at start of interpolate$l
	B	interpolate$l

interpolate_stop$l
	PULL	"r3,r4"
	SUB	r4,r4,#1		; because we increment at start of interpolate$l
	B	interpolate$l

;	MOV	r1,r0			; destination
;	BL	strcopy			; converts MT's irritating 10-term into a 0-term
;	SUB	r4,r1,r3		; get back to start of buffer
;	SUB	r4,r4,#1		; including terminator
; !!!
done_interpolation$l
	MOV	r4,r0			; result

	PULL	"r0-r2"

; Now we want to store r4 (the result), under the name r2, at the end of r0.
	CMP	r0,#-1
	BLEQ	claim_vartable$l	; \X r0 => var table, or VS
	BVS	result_sans_store$l	; result - we can't store it, but this isn't relevant

; Okay, so what we want to do now is to ensure we have enough space in the table,
; and then to plonk our new pointers in (and move up the (0,0) pseudo-entry).
; r1 is a safe register here, as is r3 ...
	LDR	r1,[r0,#vartable_num_entries]
	LDR	r3,[r0,#vartable_table_size]
	CMP	r1,r3
	BLEQ	increase_vartable$l	; GT is an error - should never happen
					; \X everything set up as if it never happened
	BVS	result_sans_store$l

	MOV	r3,r0			; store variable table
	MOV	r1,r2			; variable name
	BL	strdup
	BVS	result_sans_store$l
	MOV	r2,r0			; duplicated variable name (so safe)

	vt_top	r3,r1			; set r1 to the top of the table
	MOV	r14,#0
	STMIA	r1!,{r2,r4,r14}		; store name (prev. copied), value
	STR	r14,[r1],#4		; and new end of table pseudo-entry
	LDR	r0,[r3,#vartable_num_entries]
	ADD	r0,r0,#1
	STR	r0,[r3,#vartable_num_entries]

; drop through - identical code
;	MOVS	r0,r4			; result into r0
;	FNRTS				; and return, a job well done

result_sans_store$l
	MOVS	r0,r4
	FNRTS

gotnothing$l
	PULL	"r0-r2"
gotnothing_nopull$l
	MOVS	r0,#0			; SEZ
	FNRTS

; \E r9 mode dispatch table
; \X r0 created and stored
claim_vartable$l
	FNJSR	"r1"
	MOV	r0,#vartable_pagesize_BYTES
	BL	heap_claim
	FNRTS	VS
	MOV	r1,#2
	STR	r1,[r0,#vartable_num_entries]				; population: 2 (inc. start and end)
	MOV	r1,#0
	STR	r1,[r0,#vartable_first_entry + vartable_varname]	; end marker
	STR	r1,[r0,#vartable_first_entry + vartable_varvalue]	; of the table
	MOV	r1,#vartable_pagesize
	STR	r1,[r0,#vartable_table_size]
	STR	r0,[r9,#d_variabletable]				; store the table
	FNRTS

; \E r0 table, r3 size of table, r9 mode dispatch table
; \X r0,r3 updated and stored
increase_vartable$l
	FNJSR	"r1"
	ADD	r1,r3,#vartable_pagesize_BYTES
	BL	heap_ensure
	ADDVC	r3,r3,#vartable_pagesize_BYTES
	STRVC	r3,[r0,#vartable_table_size]
	STRVC	r0,[r9,#d_variabletable]
	FNRTS

; \E r1 mode dispatch table, r4 mode number
; \X r0-r1,r4 preserved, r3 => MessageTrans block for TMF
;    Either TMF initialised and MessageTrans pointer stored
;    or -1 stored ("no TMF").
;
; Note that we're not having the file stored in our own workspace.
; This is partly because it would increase the storage requirements
; so we can free everything again, but mostly because I don't believe
; it's necessary - it should be sufficiently fast this way. If this
; proves wrong, it's not difficult to change. REMEMBER to change
; all references to the opt_TMFbase table though :-)
load_tmf$l
	FNJSR	"r0-r2"
	LDR	r1,[r1,#e_title * 2]	; mode name
	BL	get_mode_tmf		; \X r1 => filename of TMF for this mode
	CMP	r1,#0
	BEQ	notmf$l			; couldn't find it

	MOV	r0,#6
	MOV	r3,#16
	SWI	XOS_Module
	MOV	r0,r2
	MOV	r3,r2			; store in case we need to free it
	MOV	r2,#0			; use RMA
	SWI	XMessageTrans_OpenFile
;	BVS	free_notmf$l		; didn't work
;	MOV	r3,r0			; block to store & return -- unnecessary
	BVC	return$l

free_notmf$l
	MOV	r0,#7
	MOV	r2,r3
	SWI	XOS_Module		; free it

notmf$l
	MOV	r3,#-1			; and drop through

return$l
; \E r3 number to stuff as MessageTrans pointer, r4 mode number
;    Exits appropriately.
	FNADD	r0,r12,opt_TMFbase
	STR	r3,[r0,r4,LSL #2]
	FNRTS

	LOCAL
; \X closes TMFs and frees all TMF MessageBlock pointers
free_tmfs
	FNJSR	"r0-r3"
	FNADD	r1,r12,opt_TMFbase
	MOV	r3,#max_mode
loop$l	LDR	r2,[r1],#4		; a pointer?
	CMP	r2,#0
	CMPNE	r2,#-1
	BEQ	skip$l
	MOV	r0,r2
	SWI	XMessageTrans_CloseFile
	MOV	r0,#7
	SWI	XOS_Module		; drop through
skip$l	SUBS	r3,r3,#1
	BGT	loop$l			; some left to try
	FNRTS

	LOCAL
; \E r1 mode name
; \X r1 filename of mode's TMF, or 0, r0 corrupted
get_mode_tmf
	FNJSR	"r2-r6"
	MOV	r2,r1			; source
	PUSH	"r2"
	MOV	r0,#16
	ADR	r1,config_mode		; destination
	BL	strbuf			; adds terminator
	MOV	r0,#17
	ADR	r1,config_start
	SWI	XOS_File		; first look in ZapUser
	PULL	"r2"
	TEQ	r0,#1
	FNRTS	EQ			; found? return, else try sysvar
	MOV	r0,#16
	ADR	r1,sysvar_mode		; destination
	BL	strbuf			; adds terminator
	ADR	r0,sysvar_start
	ADR	r1,sysvar_result
	MOV	r2,#256
	MOV	r3,#0
	MOV	r4,#0
	SWI	XOS_ReadVarVal
	MOVVS	r1,#0
	MOVVC	r0,#0
	STRVCB	r0,[r1,r2]		; ensure that there's a terminator
	FNRTS

sysvar_start
	=	"Zap$TMF_"
sysvar_mode
	%	16			; leeway: modes shouldn't be longer than 7 chars
					; however some (including Taskwindow!) go up to 10
config_start
	=	"ZapUser:Config.TMFs."	; 20 characters :-)
config_mode
sysvar_result
	%	256			; a fixed buffer will always be necessary
					; for use in the interpolation routines
	ALIGN

; That's it
	END
