; Contains heap/memory management code
; $Id: Heap,fff,v 1.1.2.7 1999/08/04 13:53:37 james Exp $

 GET h.ZapHeader
 GET h.Messages

 EXPORT init_heap
 EXPORT kill_heap
 EXPORT set_wimpslot
 EXPORT heap_claim
 EXPORT heap_ensure
 EXPORT heap_extend
 EXPORT heap_free
 EXPORT claim_list_block
 EXPORT minimise_memory
 EXPORT move_bytes
 EXPORT fill_words
 EXPORT heap_check
 EXPORT set_block_size

heap_size		* &1000		; initial heap size / inc size

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Zap memory management						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Zap's memory is divided up in to blocks, and all operations are
; handled by set_block_size below.
;
; Memory map (of Wimpslot):
;
; env_start (&8000)		Stack and fixed buffers (see init_fixed)
; heap_start ->	heap_end	Acorn syle (OS_Heap) Heap [Zap block -1]
;
; font_start -> font_end	Font bitmaps buffer       [Zap block -2]
;
; (file_list!0)+f_ptr		First file buffer	  [Zap block  0]
; ....
; (file_list!((n-1)*file_blk
;  +f_ptr			n'th file buffer	  [Zap block n-1]
;
; file_end			END (of files)
;
; In all cases env_top gives the address of the end of the wimpslot.
; This is either heap_end or file_end depending on the OS version.
;
; For OS < 3.5 all blocks are stacked on top of each other as above,
; resizing one moves all the others.
;
; For OS >= 3.5 the font bitmaps buffer and the file buffers are in
; two dynamic areas starting at font_start and (file_list!0)+f_ptr
; (if the first block isn't dead!!) respectively.
;
; NB Matters are complicated by the fact that some file blocks are marked
; as dead (f_ptr=-1) and so that block does not 'exist'! Setting a file's
; block size to zero gets it in this state and setting it to a positive
; value gets it out of this state.
; [ I know this is silly, but it's too late to change now :-( ].

 LOCAL

;E R0=Zap block number (-2=bitmaps -1=heap n>=0 for file n)
;  R1=new size for this block (>=0)
;X Block size changed - all blocks above shifted.
;  The block size is aligned before claiming.
;  Wimpslot / Dynamic areas resized. #
;  (Gives a Zap out of memory error if the extra memory can't be claimed)
;  (If the block was dead (didn't exist) then it is put alive again and
;   set to the given size).
;  (Contracting block -1 (the heap) does not call OS_Heap - it is assumed
;   that you've done this - see minimise memory)

set_block_size
 FNJSR "R1-R11"
 SYSLOGF "set_block_size %0d to %1x",LOG_MEMORY
 FNLDR R11,wimp_version		; get version number
 MOV R10,R0			; R10=block number (-1 = heap -2=font)
 ADD R5,R1,#3
 BIC R5,R5,#3			; R5=new size word aligned
 BL get_zap_block
 MOV R4,R0			; start address of current block
 CMP R10,#0
 BGE file$l			; it's a file block
 CMP R10,#-1
 BEQ heap$l
 CMP R10,#-2
 BEQ font$l
 BL err$l			; unrecognised!
 FNRTS
heap$l
 ADR R6,wimpslot$l
 FNLDR R7,heap_end
 SUB R7,R7,R4
 ADR R8,heapsub$l
 FNLDR R9,env_top
 B move$l
font$l
 ADR R6,fontslot$l
 FNLDR R7,font_end
 SUB R7,R7,R4
 ADR R8,fontsub$l
 CMP R11,#320
 FNLDR R9,env_top,LT		; in the wimpslot
 FNLDR R9,font_end,GE		; in it's own dynamic area
 B move$l
file$l
 ADR R6,fileslot$l
 ADD R0,R10,#1			; next block
 BL get_zap_block
 SUB R7,R0,R4			; length of this block
 ADR R8,filesub$l
 FNLDR R9,file_end
; this next bit resizes the block. It needs set up:
; R4=address of the block start
; R5=new block size
; R6=address of routine to resize the area in which the block lies
;  Called with: R0=signed change in size R11=wimp version
; R7=current length of the block
; R8=address of routine to change the block size
;  Called with: R0=signed change in size R4,R7 as above
;               R10=block number R11=wimp version
; R9=address of top of the area the block sits in
; R10=block number
; R11=new block size
move$l
 SUBS R5,R5,R7			; R5=signed change in size of block
 BGT moveup$l
 BLT movedown$l
moved$l				; block has been moved
 FNLDR R9,file_num		; block to stop at
 CMP R10,#0
 BGE update$l			; update from next file block
 CMP R11,#320
 FNRTS GT			; none above - in separate areas
 CMP R10,#-2
 MOVEQ R10,#-1			; font becomes -1
 MOVNE R10,#-2			; heap becomes -2
update$l			; update from next block
 ADD R10,R10,#1			; next block
 CMP R10,R9
 FNRTS GE			; already updated blocks above - Exit
 CMP R10,#0
 BLT upfont$l
 FNLDR R1,file_list
 ADD R1,R1,R10,LSL#f_shift
 LDR R0,[R1,#f_ptr]
 CMP R0,#-1
 ADDNE R0,R0,R5
 STRNE R0,[R1,#f_ptr]		; update file start if it exists
 B update$l
upfont$l
 FNLDR R0,font_start
 ADD R0,R0,R5
 FNSTR R0,font_start
 FNLDR R0,font_end
 ADD R0,R0,R5
 FNSTR R0,font_end
 B update$l
; shift block up (R5>0)
moveup$l
 MOV R0,R5			; signed change in area size
 MOV R14,PC			; recently was MOVS, but not in v1.35 - sja
 MOV PC,R6			; increase area size (eg wimpslot)
 FNRTS VS			; failed - exit - nothing changed yet
 ADD R1,R4,R7			; start of the next block
 ADD R2,R1,R5			; destination (shifting up)
 SUBS R3,R9,R1			; amount to move
 SWIGT XZapRedraw_MoveBytes ; BLGT move_bytes		; shift the data above the block
 MOV R0,R5
 MOV R14,PC			; recently was MOVS, but not in v1.35 - sja
 MOV PC,R8			; enlarge the block (eg heap, file)
 BVC moved$l			; done
 FNRTS
; shift block down (R5<0)
movedown$l
 MOV R0,R5
 MOV R14,PC			; recently was MOVS, but not in v1.35 - sja
 MOV PC,R8			; contract the block (eg heap, file)
 FNRTS VS
 ADD R1,R4,R7			; start of the next block (before shrink)
 ADD R2,R1,R5			; destination (shifting down)
 SUBS R3,R9,R1			; amount to move
 SWIGT XZapRedraw_MoveBytes ; BLGT move_bytes		; shift the data above the block
 MOV R0,R5			; signed change in area size
 MOVS R14,PC
 MOV PC,R6			; decrease area size (eg wimpslot)
 BVC moved$l
 FNRTS
; Subroutines needed to resize the areas. Errors must be handled properly.
; Attempt to resize BEFORE updating the pointers and don't on an error.
wimpslot$l			; change wimp slot size by R0
 FNJSR "R1"
 MOV R1,R0			; save signed change
 FNLDR R0,env_top
 ADD R0,R0,R1			; new environment top
 BL set_wimpslot		; updates env_top
 FNRTS VS			; failed - don't update pointers
 CMP R11,#320
 FNLDR R14,file_end,LT
 ADDLT R14,R14,R1
 FNSTR R14,file_end,LT		; update file_end if it's in the wimpslot
 FNRTS
fileslot$l			; change dynamic area files sit in
 CMP R11,#320
 BLT wimpslot$l			; just update the wimpslot
 FNJSR "R1"
 FNLDR R1,file_end		; current top of files
 ADD R1,R1,R0			; new top
 FNLDR R0,file_area		; dynamic area handle
 BL set_dynamic_area
 FNSTR R1,file_end,VC		; update new top if there is no error
 FNRTS
fontslot$l
 CMP R11,#320
 BLT wimpslot$l			; resize wimpslot for old case
 MOV PC,R14			; dynamic area already resized
; subroutines needed to resize blocks
heapsub$l			; change heap size by R0
 FNJSR "R1-R3"
 FNLDR R1,heap_end		; set new heap end (already shrunk heap)
 ADD R1,R1,R0
 FNSTR R1,heap_end
 ADDS R3,R0,#0			; signed change
 FNRTS LE			; already shrank
 FNLDR R1,heap_start
 MOV R0,#5
 SWI XOS_Heap			; enlarge heap (can't fail)
 FNRTS
fontsub$l			; resize font block
 FNJSR "R1"
 FNLDR R1,font_end
 ADD R1,R1,R0			; new font end
 CMP R11,#320
 BLT fontdone$l			; old OS
 FNLDR R0,font_area		; area number
 BL set_dynamic_area		; resize
fontdone$l
 FNSTR R1,font_end,VC		; set new size if no error
 FNRTS
filesub$l			; resize a file block
 FNJSR "R1"
; FNLDR R14,file_num
; CMP R10,R14
; FNPULL GE
; BGE err2$l			; try to avoid loading from memory that doesn't exist
; falls over heavily ... something's going badly wrong around here.
; I can't actually figure out what, but then this code is fairly weird :-(

 FNLDR R1,file_list
 ADD R1,R1,R10,LSL#f_shift	; start of the block
 LDR R14,[R1,#f_ptr]		; linked?
 CMP R14,#-1
 STREQ R4,[R1,#f_ptr]
 STREQ R0,[R1,#f_blklen]	; bring the file block alive
 LDRNE R14,[R1,#f_blklen]
 ADDNE R14,R14,R0
 STRNE R14,[R1,#f_blklen]	; update block size
 FNRTS
err$l ERRlit "Bad set_block_size"
err2$l ERRlit "Corrupted block area (set_block_size)"

 LOCAL

;E R0=zap block number (file may be unlinked)
;X R0=start address of next 'live' block (or end) |

get_zap_block
 FNJSR
 CMP R0,#-1
 FNLDR R0,font_start,LT		; -2=font
 FNLDR R0,heap_start,EQ		; -1=heap
 FNRTS LE
loop$l				; find next file
 FNLDR R14,file_num
 CMP R0,R14
 FNLDR R0,file_end,GE		; last file +1 = end
 FNRTS GE			; return
 FNLDR R14,file_list
 ADD R14,R14,R0,LSL#f_shift	; pointer to that file block
 LDR R14,[R14,#f_ptr]		; that file pointer
 CMP R14,#-1
 ADDEQ R0,R0,#1
 BEQ loop$l			; try next file
 MOV R0,R14
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Manage dynamic areas / Wimp slot				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=dynamic area number R1=end address of area (min)
;X Size set (NB Dynamic area may have been larger than I thought it was
;  so size must be read)

set_dynamic_area
 FNJSR "R1-R9"
 SYSLOGF "set_dynamic_area %0d to %1x",LOG_MEMORY
 MOV R9,R1			; save new end
 MOV R1,R0			; area number
 MOV R0,#2
 SWI XOS_DynamicArea		; R2=current size R3=start address
 FNRTS VS
 SUB R9,R9,R3			; size required for area
 MOV R0,R1			; area
 SUB R1,R9,R2			; signed change
 SWI XOS_ChangeDynamicArea
 BLVS out_of_memory		; change dynamic area failed
 FNRTS

 LOCAL

;E R0=new environment top R12=vars R13=stack
;X Wimpslot set to new value and env_top updated #
;  (Wimpslot preserved if the enlargement failed)

set_wimpslot
 FNJSR "R1-R6,R10"		; note wimpslot corrupts R4
 SUB R0,R0,#&8000		; new size of slot
 TST R0,#3
 BLNE err$l			; misaligned wimpslot set
 FNRTS VS
 SYSLOGF "set_wimpslot to %0d",LOG_MEMORY
 MOV R1,#-1			; read next size
 MOV R10,R0			; save slot size asked for
 SWI XWimp_SlotSize		; CORRUPTS R4 !!!!
 FNRTS VS
 CMP R0,R10
 BLT failed$l
 ADD R0,R10,#&8000
 FNSTR R0,env_top		; set new env top
 FNRTS
failed$l
 FNLDR R0,env_top		; old env_top
 SUB R0,R0,#&8000		; old slot size
 MOV R1,#-1
 SWI XWimp_SlotSize		; restore old slot size
 BLVC out_of_memory		; not enough room error
 FNRTS
err$l ERRlit "Internal error: misaligned wimpslot"

out_of_memory ERR "zap_e_lackofmem"

 LOCAL

;X Heap and dynamic areas initialised, heap to #heap_size.
;  set_block_size can be used after this call + init_vars
;  but not before! #

init_heap
 FNJSR "R1-R4"
 FNLDR R1,env_top		; address for heap
 ADD R0,R1,#heap_size
 BL set_wimpslot		; set wimpslot to the correct size
 MOVVC R0,#0			; (updates env_top)
 MOVVC R3,#heap_size
 FNSTR R1,heap_start,VC
 SWIVC XOS_Heap			; initialise heap
 FNRTS VS
 SYSLOGF "init_heap created heap size %3x at %1x",LOG_MEMORY
 ADD R1,R1,R3
 FNSTR R1,heap_end		; end of heap (start of file store)
 FNLDR R0,wimp_version		; OS version
 CMP R0,#320
 BGT newos$l
 FNSTR R1,font_start
 FNSTR R1,font_end
 FNSTR R1,file_end		; set up the rest of the vars
 SYSLOG "init_heap initialised font and file buffers",LOG_MEMORY
 FNRTS
newos$l				; use dynamic areas for files and fonts
 MOV R1,#0
 MOV R2,#8*1024*1024		; max size = 8 meg
 ADR R3,font$l
 BL create_dynamic_area
 FNRTS VS
 FNSTR R0,font_area
 FNSTR R1,font_start
 FNSTR R1,font_end
 SYSLOGF "init_heap created font DA #%0d at %1x",LOG_MEMORY
 MOV R1,#0
 MOV R2,#-1			; max size = total ram
 ADR R3,file$l
 BL create_dynamic_area
 FNRTS VS
 FNSTR R0,file_area
 FNSTR R1,file_end
 SYSLOGF "init_heap created file DA #%0d at %1x",LOG_MEMORY
 FNRTS
font$l = |zap$|," bitmaps",0
file$l = |zap$|," files",0
 ALIGN

;E R1=initial size for dynamic area R2=max size of area (or -1) R3=name
;X R0=handle of dynamic area R1=address of area #

create_dynamic_area
 FNJSR "R2-R8"			; don't push R1!
 SYSLOGF "create_dynamic_area size %1x, max size %2x, name %3s",LOG_MEMORY+1
 MOV R8,R3			; name string
 MOV R5,R2			; max size
 MOV R2,R1			; start size
 MOV R0,#0			; create
 MOV R1,#-1
 MOV R3,#-1
 MOV R4,#0+(1<<7)		; global r/w + can't be dragged
 MOV R6,#0			; no routine
 MOV R7,#0			; workspace
 SWI XOS_DynamicArea
 MOVVC R0,R1
 MOVVC R1,R3
 FNRTS

 LOCAL

;X Kills dynamic areas etc prior to exit #

kill_heap
 FNJSR "R1-R2"
 FNLDR R1,wimp_version
 CMP R1,#320
 FNRTS LE			; no dynamic areas to kill
 FNADD R2,R12,font_area		; kill fonts
 BL kill$l
 FNADD R2,R12,file_area		; kill files
 BL kill$l
 FNRTS
kill$l	FNJSR	; could be in SVC mode...
	LDR	R1,[R2]
	TEQ	R1,#0
	MOVNE	R0,#0
	STRNE	R0,[R2]
	MOVNE	R0,#1
	SWINE	XOS_DynamicArea
 [ LOGGING = SYSLOG
	FNRTS	VS
	SYSLOGF "kill_heap killed DA #%1d",LOG_MEMORY
 ]
	FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Manage the Acorn heap in block -1				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=signed change in heap
;X heap size changed #

heap_enlarge
 FNJSR "R1"
 SYSLOGF "heap_enlarge %0x",LOG_MEMORY+3
 FNLDR R1,heap_end
 FNLDR R14,heap_start
 SUB R1,R1,R14			; size of heap
 ADD R1,R1,R0			; new size of heap
 MOV R0,#-1			; block -1
 BL set_block_size		; set new heap size
 FNRTS

;E R0=required num of bytes
;X R0=pointer to heap block #

 LOCAL

heap_claim
 FNJSR "R1-R3"
 SYSLOGF "heap_claim %0d (%0x)",LOG_MEMORY+2
 MOVS R3,R0
 MOVEQ R3,#1			; bug in heap manager (can't have 0 blks)
 MOV R0,#2
 FNLDR R1,heap_start
 SWI XOS_Heap			; claim the block
 [ LOGGING = SYSLOG
 BVS failed$l
 MOV R0,R2
 SYSLOGF "heap_claim returns %0x",LOG_MEMORY+2
 FNRTS
failed$l
 |
 MOVVC R0,R2
 FNRTS VC			; succeeded!
 ]
 ADDS R0,R3,#heap_size		; amount to enlarge heap & clv
 BL heap_enlarge
 MOVVC R0,#2			; if heap enlarged...
 FNLDR R1,heap_start,VC
 SWIVC XOS_Heap			; try again
 MOVVC R0,R2
 SYSLOGF "heap_claim returns %0x",LOG_MEMORY+2
 FNRTS				; return if it errors again

;E R0=heap block R1=size
;X R0=new heap block ptr (at least this size) #

 LOCAL

heap_ensure
 SYSLOGF "heap_ensure %0x to %1d (%1x)",LOG_MEMORY+2
 TEQ R0,#0
 MOVEQ R0,R1
 BEQ heap_claim
 STMFD R13!,{R1-R4,R14}
 [ LOGGING = SYSLOG
 STR R0,blk$l			; store heap block
 ]
 MOV R2,R0			; heap block
 MOV R4,R1			; size required
 MOV R0,#6
 FNLDR R1,heap_start
 SWI XOS_Heap			; read heap block size+4
 LDMVSFD R13!,{R1-R3,PC}	; (due to bug in heap manager)
 SUB R0,R3,#4			; actual size of heap block
 SUBS R3,R4,R0			; enlargement amount
 BGT he0			; extend block by R3 if needed
 MOV R0,R2			; return pointer to current block
 [ LOGGING = SYSLOG
 LDR R1,blk$l
 CMP R1,R0			; did we have to move the block in the heap?
 BNE changed$l
 SYSLOGF "heap_ensure returns %0x unmoved",LOG_MEMORY+2
 LDMFD R13!,{R1-R4,PC}
changed$l
 SYSLOGF "heap_ensure returns %0x",LOG_MEMORY+2
 LDMFD R13!,{R1-R4,PC}
 |
 LDMFD R13!,{R1-R4,PC}		; return if block already big enough
 ]
blk$l
 DCD 0

;E R0=heap block R1=signed change
;X R0=new ptr to block #

 LOCAL

heap_extend
 SYSLOGF "heap_extend %0x by %1d (%1x)",LOG_MEMORY+2
 TEQ R0,#0
 MOVEQ R0,R1
 BEQ heap_claim
 STMFD R13!,{R1-R4,R14}
 MOV R2,R0			; heap block
 MOV R3,R1			; extend size
he0
 MOV R4,R2			; save heap block ptr
 MOV R0,#4
 FNLDR R1,heap_start
 SWI XOS_Heap			; attempt to enlarge block
 [ LOGGING = SYSLOG
 BVS failed$l
 MOV R0,R2
 CMP R0,R4			; did we have to move the block in the heap?
 BNE changed$l
 SYSLOGF "heap_extend/ensure returns %0x unmoved",LOG_MEMORY+2
 LDMFD R13!,{R1-R4,PC}
changed$l
 SYSLOGF "heap_extend/ensure returns %0x",LOG_MEMORY+2
 LDMFD R13!,{R1-R4,PC}
failed$l
 |
 MOVVC R0,R2
 LDMVCFD R13!,{R1-R4,PC}	; return if block enlarged ok
 ]
 ADDS R0,R0,#0			; clv
 MOV R0,#6
 FNLDR R1,heap_start
 MOV R2,R4			; block ptr
 MOV R4,R3			; save required extension
 SWI XOS_Heap			; read block size(+4)
 LDMVSFD R13!,{R1-R4,PC}
 SUBS R0,R3,#4			; current size of block
 ADD R0,R0,R4			; required size
 ADD R0,R0,#heap_size	       ; heap increment
 BL heap_enlarge		; enlarge the heap
 MOVVC R0,#4
 FNLDR R1,heap_start,VC
 MOVVC R3,R4			; size change
 SWIVC XOS_Heap			; try extension of block again
 [ LOGGING = SYSLOG
 LDMVSFD R13!,{R1-R4,PC}
 MOV R0,R2
 SYSLOGF "heap_extend/ensure returns %0x",LOG_MEMORY+2
 |
 MOVVC R0,R2
 ]
 LDMFD R13!,{R1-R4,PC}		; error if it fails this time

;E R0=heap block/-ve
;X returns if -ve and frees heap block o/w #

 LOCAL

heap_free
 FNJSR "R1-R3"
 SYSLOGF "heap_free %0x",LOG_MEMORY+2
 MOVS R2,R0
 FNRTS MI			; return if pointer negative
 MOV R0,#3
 FNLDR R1,heap_start
 SWI XOS_Heap			; free heap block
 FNRTS

;X Heap shrunk as much as possible #
; (command MINIMISEMEMORY)

 & 7
minimise_memory
 FNJSR "R1-R4"
 MVN R3,#&400000		; shrink by 4 megs
 ADD R3,R3,#1			; round up to -&40000
 MOV R0,#5
 FNLDR R1,heap_start
 SWI XOS_Heap
 RSBVS R3,R3,#0			; negate if return amount shrunk
 ADDS R0,R0,#0			; clv R3=amount shrank by
 MOV R0,#-1			; -1 = heap
 FNLDR R2,heap_end
 SUB R1,R2,R1			; current size
 ADD R1,R1,R3			; new size
 BL set_block_size
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Claiming of new file and window blocks			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=list ptr R1=num in list R2=size of list objects
;X R0-R1 updated R2=free block R3=offset of free block
;  Entries in block initialised to -1's #

claim_list_block
 STMFD R13!,{R4,R10,R14}
 SYSLOGF "claim_list_block size %2x (list %0x, num %1d)",LOG_MEMORY
 MOV R10,R2			; size of objects
 MOV R2,R0			; current list pointer
 MOV R3,#0			; current num
cl1
 CMP R3,R1
 BCS cl2			; if end of list then cl2
 LDR R4,[R2]
 CMN R4,#1
 BEQ cl3			; entry not used
 ADD R3,R3,#1
 ADD R2,R2,R10
 B cl1				; next entry
cl2
 MOV R4,R1			; save num in list
 MOV R1,R10
 BL heap_extend			; increase list by one entry
 LDMVSFD R13!,{R4,R10,PC}
 ADD R1,R4,#1			; new num in list
 MLA R2,R10,R3,R0		; offset of new entry
cl3
 MVN R4,#0
 MOV R14,R2			; start of entry
cl4
 STR R4,[R14],#4
 SUBS R10,R10,#4		; initialise to -1's
 BHI cl4
 SYSLOGF "claim_list_block returns block %3d at %2x",LOG_MEMORY
 LDMFD R13!,{R4,R10,PC}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MOVE BYTES FAST (FROM ANYWHERE TO ANYWHERE)			 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;E R1=source address
;  R2=destination address
;  R3=number of bytes
;X bytes moved FAST from R1 to R2 with data always preserved R0-R3 corrupt |
;  it is careful not to look beyond the start/end of the data

move_bytes
; SWI XZapRedraw_MoveBytes
; MOV PC,R14
 TEQ R3,#0
 MOVEQS PC,R14			; nothing to do
 CMP R2,R1
 BHI up$l			; move up starting from end of data
 BCC down$l			; move down starting from start of data
 MOVS PC,R14			; data not being moved
up$l				; MOVE BYTES UP (from end)
 ADD R1,R1,R3			; end of source
 ADD R2,R2,R3			; end of dest
 TST R2,#3
 BNE ualign$l
ualigned$l			; destination (R2) now word aligned
 TST R1,#3
 BNE uslow$l			; source not word align so need to shift
 SUBS R3,R3,#8*4
 BLT uf32$l			; up fast less than 32 bytes
 STMFD R13!,{R4-R11}
a$l
 LDMDB R1!,{R4-R11}
 STMDB R2!,{R4-R11}
 SUBS R3,R3,#8*4
 BGE a$l			; copy 32 bytes at a time
 LDMFD R13!,{R4-R11}
uf32$l				; copy R3+32 bytes
 ADDS R3,R3,#7*4
 BLT uf4$l			; up fast less than 4 bytes
b$l
 LDR R0,[R1,#-4]!
 STR R0,[R2,#-4]!
 SUBS R3,R3,#4
 BGE b$l			; copy 4 bytes at a time
uf4$l
 ADDS R3,R3,#4			; number of bytes remaining
 MOVEQS PC,R14			; none
 LDR R0,[R1,#-4]!		; load next 4 (ok as R1,R2 both aligned)
c$l
 MOV R0,R0,ROR#24
 STRB R0,[R2,#-1]!
 SUBS R3,R3,#1
 BGT c$l			; copy remaining bytes
 MOVS PC,R14
ualign$l
 LDRB R0,[R1,#-1]!
 STRB R0,[R2,#-1]!
 SUBS R3,R3,#1
 MOVEQS PC,R14
 TST R2,#3
 BNE ualign$l			; copy bytes 'till dest aligned
 B ualigned$l
uslow$l				; dest (R2) aligned, source (R1) not
 STMFD R13!,{R12,R14}
 AND R12,R1,#3			; byte offset of last read byte (1-3)
 BIC R1,R1,#3
 ADD R1,R1,#4			; address of last read word
 MOV R12,R12,LSL#3		; number of bits not read in R1,#-4
 RSB R0,R12,#32			; number of bits already read in R1,#-4
 LDR R14,[R1,#-4]!
 MOV R14,R14,LSL R0		; fill input buffer (R14)
 SUBS R3,R3,#8*4
 BLT us32$l			; up slow less than 32 bytes
 STMFD R13!,{R4-R11}
d$l
 LDMDB R1!,{R4-R11}
 ORR R14,R14,R11,LSR R12	; copy 32 bytes at a time shifting
 MOV R11,R11,	 LSL R0
 ORR R11,R11,R10,LSR R12
 MOV R10,R10,	 LSL R0
 ORR R10,R10,R9, LSR R12
 MOV R9, R9,	 LSL R0
 ORR R9, R9, R8, LSR R12
 MOV R8, R8,	 LSL R0
 ORR R8, R8, R7, LSR R12
 MOV R7, R7,	 LSL R0
 ORR R7, R7, R6, LSR R12
 MOV R6, R6,	 LSL R0
 ORR R6, R6, R5, LSR R12
 MOV R5, R5,	 LSL R0
 ORR R5, R5, R4 ,LSR R12
 STMDB R2!,{R5-R11,R14}
 MOV R14,R4,LSL R0
 SUBS R3,R3,#8*4
 BGE d$l
 LDMFD R13!,{R4-R11}
us32$l				; up slow less than R3+32 bytes
 ADDS R3,R3,#7*4
 BLT us4$l			; up slow less than 4 bytes
 STMFD R13!,{R4}
e$l
 LDR R4,[R1,#-4]!
 ORR R14,R14,R4,LSR R12
 STR R14,[R2,#-4]!
 MOV R14,R4,LSL R0
 SUBS R3,R3,#4
 BGE e$l			; copy one word at a time
 LDMFD R13!,{R4}
us4$l
 ADDS R3,R3,#4			; number of bytes left
 LDMEQFD R13!,{R12,PC}^
 ADD R1,R1,R12,LSR#3		; address of last byte used
f$l
 LDRB R14,[R1,#-1]!		; get next byte (don't read too far)
 STRB R14,[R2,#-1]!		; put next byte
 SUBS R3,R3,#1
 BGT f$l
 LDMFD R13!,{R12,PC}^
down$l				; MOVE BYTES DOWN (from start)
 TST R2,#3
 BNE dalign$l			; ensure output (R2) aligned
daligned$l			; R2 now aligned
 TST R1,#3
 BNE dslow$l			; source not aligned
 SUBS R3,R3,#8*4
 BLT df32$l			; less than 32 to move
 STMFD R13!,{R4-R11}
g$l
 LDMIA R1!,{R4-R11}
 STMIA R2!,{R4-R11}
 SUBS R3,R3,#8*4
 BGE g$l			; move 32 bytes at a time
 LDMFD R13!,{R4-R11}
df32$l
 ADDS R3,R3,#7*4
 BLT df4$l			; less than 4 bytes to move
h$l
 LDR R0,[R1],#4
 STR R0,[R2],#4
 SUBS R3,R3,#4
 BGE h$l			; shift 4 bytes at a time
df4$l
 ADDS R3,R3,#4			; number of bytes left
 MOVEQS PC,R14
 LDR R0,[R1],#4			; load next 4 (ok as both aligned)
i$l
 STRB R0,[R2],#1
 MOV R0,R0,ROR#8
 SUBS R3,R3,#1
 BGT i$l			; copy the remaining bytes
 MOVS PC,R14
dalign$l
 LDRB R0,[R1],#1
 STRB R0,[R2],#1
 SUBS R3,R3,#1
 MOVEQS PC,R14
 TST R2,#3
 BNE dalign$l			; word align the destination
 B daligned$l
dslow$l				; dest (R2) aligned, source (R1) not
 STMFD R13!,{R12,R14}
 AND R12,R1,#3			; byte offset of first unread byte (1; -3)
 BIC R1,R1,#3			; address of first not fully read word
 MOV R12,R12,LSL#3		; number of bits read from !R1
 RSB R14,R12,#32		; number of bits not read from !R1
 LDR R0,[R1],#4
 MOV R0,R0,LSR R12		; fill the input buffer (R0)
 SUBS R3,R3,#8*4
 BLT ds32$l			; less than 32 bytes left
 STMFD R13!,{R4-R11}
j$l
 LDMIA R1!,{R4-R11}
 ORR R0, R0, R4, LSL R14	; copy 32 bytes at a time with shifting
 MOV R4, R4,	 LSR R12
 ORR R4, R4, R5, LSL R14
 MOV R5, R5,	 LSR R12
 ORR R5, R5, R6, LSL R14
 MOV R6, R6,	 LSR R12
 ORR R6, R6, R7, LSL R14
 MOV R7, R7,	 LSR R12
 ORR R7, R7, R8, LSL R14
 MOV R8, R8,	 LSR R12
 ORR R8, R8, R9, LSL R14
 MOV R9, R9,	 LSR R12
 ORR R9, R9, R10,LSL R14
 MOV R10,R10,	 LSR R12
 ORR R10,R10,R11,LSL R14
 STMIA R2!,{R0,R4-R10}
 MOV R0,R11,LSR R12
 SUBS R3,R3,#8*4
 BGE j$l
 LDMFD R13!,{R4-R11}
ds32$l				; less than 32 bytes left
 ADDS R3,R3,#7*4
 BLT ds4$l			; less than 4 left
 STMFD R13!,{R11}
k$l
 LDR R11,[R1],#4
 ORR R0,R0,R11,LSL R14
 STR R0,[R2],#4
 MOV R0,R11,LSR R12
 SUBS R3,R3,#4
 BGE k$l			; copy 4 bytes at a time
 LDMFD R13!,{R11}
ds4$l
 ADDS R3,R3,#4			; number of bytes left
 LDMEQFD R13!,{R12,PC}^
 SUB R1,R1,R14,LSR#3		; address of first unused byte
l$l
 LDRB R0,[R1],#1		; get next byte - don't read off end
 STRB R0,[R2],#1
 SUBS R3,R3,#1
 BGT l$l			; copy remaining bytes
 LDMFD R13!,{R12,PC}^

;E R1=word R2=dest (word aligned) R3=number of bytes (word aligned)
;X R1-R3 corrupt |

fill_words
 SUBS R3,R3,#16*4
 BLT fb2
 STMFD R13!,{R4-R11}
 MOV R4,R1
 MOV R5,R1
 MOV R6,R1
 MOV R7,R1
 MOV R8,R1
 MOV R9,R1
 MOV R10,R1
 MOV R11,R1
fb1
 STMIA R2!,{R4-R11}
 STMIA R2!,{R4-R11}
 SUBS R3,R3,#16*4
 BGE fb1
 LDMFD R13!,{R4-R11}
fb2
 ADDS R3,R3,#16*4
 MOVEQ PC,R14
fb3
 STR R1,[R2],#4
 SUBS R3,R3,#4
 BGT fb3
 MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Heap check control					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=pointer to a heap
;X R0=0 if heap ok/pointer to block before corrupted block
;  R1=heap size		   } if heap not ok then these are
;  R2=total amount free	   } current values when exiting
;  R3=largest free block   }

heap_check
 STMFD R13!,{R4-R11,R14}
 MOV R10,R0			; save heap start
 LDR R0,[R10]
 LDR R14,he_d0
 TEQ R0,R14
 MOVNE R0,R10
 LDMNEFD R13!,{R4-R11,PC}	; corrupted at start - not a heap
 LDR R8,[R10,#4]		; free list start offset
 LDR R9,[R10,#8]		; heap base offset (end of used)
 LDR R2,[R10,#12]		; heap end offset
 SUB R2,R2,R9			; amount free at end
 TEQ R8,#0
 MOVEQ R8,R9			; no free list
 ADDNE R8,R10,R8
 ADDNE R8,R8,#4			; first free block
 ADD R9,R10,R9			; heap base address
 ADD R11,R10,#16		; first block
 MOV R3,R2			; largest free block count
 ADD R7,R10,#4			; last valid block
he2
 MOV R6,R7			; save last heap block
 MOV R7,R11			; next one
 CMP R11,R9
 BCS he4			; finished
 CMP R11,R8
 BCS he3			; a free block
 LDR R0,[R11]			; normal block length
 BL heap_check_len
 BCS he5
 SUB R1,R8,R11			; distance to next free block
 CMP R0,R1
 BGT he5
 ADD R11,R11,R0
 B he2
he3
 LDR R0,[R11]			; link to next free block
 BL heap_check_len
 BCS he5
 TEQ R0,#0
 MOVEQ R8,R9
 ADDNE R8,R8,R0			; next free block
 LDR R0,[R11,#4]		; amount free in block
 BL heap_check_len
 BCS he5
 SUB R1,R8,R11
 CMP R0,R1
 BGT he5
 ADD R2,R2,R0			; add free count
 CMP R3,R0
 MOVLT R3,R0			; largest free block
 ADD R11,R11,R0
 B he2
he4
 MOV R0,#0
 LDR R1,[R10,#&0C]		; size
 LDMFD R13!,{R4-R11,PC}		; finished ok
he5
 LDR R1,[R10,#&0C]		; size
 MOV R0,R6			; last valid block
 LDMFD R13!,{R4-R11,PC}
he_d0
 = "Heap"

; R0=length of current block
; CS if this is not ok. R0 saved, R1 corrupt

heap_check_len
 CMP R0,#0
 ORRMIS PC,R14,#Cbit	      ; negative
 SUB R1,R9,R11			; distance to area end
 CMP R0,R1
 ORRGTS PC,R14,#Cbit	      ; too large
 TST R0,#7
 ORRNES PC,R14,#Cbit	      ; not a multiple of 8
 BICS PC,R14,#Cbit	      ; ok

 END


