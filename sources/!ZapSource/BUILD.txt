BUILD instructions for Zap
==========================

Makefiles are provided to build Zap using either amu/objasm/link or
make/AS/drlink under RISC OS, and using make/AS/drlink under Unix. Please
read the whole of the appropriate section before trying to build Zap.

Under RISC OS you may have to create directories !ZapSource.t and
!ZapSource.o in order to be able to build Zap; under Unix these directories
are created automatically.

All build systems will produce a final executable, Zap (Zap,ffa under Unix),
in !ZapSource. This should be copied into !Zap.Code of a working and
up-to-date Zap install.

If you have any problems, please get in touch.

James Aylett <dj@zap.uk.eu.org>


Building using Acorn tools
--------------------------

There are two ways of building Zap using the Acorn tools. The first is more
automated, but the second is the prefered system. You will need objasm
v3.06, link v5.06 and amu v5.02 (earlier versions may work as well).

First method:

 * Double click on !Zap.!Makefile. This runs two separate Makefiles to build
   Zap.

Second method:

 * From a taskwindow, while in the !Zap directory, run amu. This will build
   Zap with the standard build name. To get another build name, use:

     amu BUILD=foo
     
   or:

     amu BUILD=foo-42).

  The amu Makefile actually has a number of different targets. The following
  are available:

     amu Zap
       build Zap itself

     amu ZapHdrs
       rebuild Zap's headers; you'll probably need to do this the first time
       you get the source. You'll also need to do this if the inter-file
       exports change; basically, if things aren't building right, try
       running this.

     amu Clean
       clean out all temporary files (but not the generated header files)

     amu Rebuild
       wipe o.ModuleBits and rebuild (ensures the the build name is correct)

     amu Revision
       stamps h.Version (to make sure that a version number change ensures a
       consistent rebuild)


Building using free RISC OS tools
---------------------------------

Again, there are two ways of building Zap using the free RISC OS tools. You
will need AS v1.30, drlink v0.30 and make v1.02 (earlier versions of AS
almost certainly won't work; get the latest version from
http://www.youmustbejoking.demon.co.uk/). The others are available from
http://micros.hensa.ac.uk/.

First method:

 * Double click on !Zap.!MakeAS. This doesn't always work, and the second
   method is better anyway.

Second method:

 * From a taskwindow, while in the !Zap directory, run:
  
     make -r -f MakefileAS
      
   This will build Zap with the standard build name. To get another build
   name, use:

     make -r -f MakefileAS BUILD=foo
      
   or:
    
     make -r -f MakefileAS BUILD=foo-42

   The AS Makefile actually has a number of different targets. The
   following are available:

     make -r -f MakefileAS Zap
       build Zap itself

     make -r -f MakefileAS ZapHdrs
       rebuild Zap's headers; you'll probably need to do this the first time
       you get the source. You'll also need to do this if the inter-file
       exports change; basically, if things aren't building right, try
       running this.

     make -r -f MakefileAS Clean
       clean out all temporary files (but not the generated header files)

     make -r -f Rebuild
       wipe o.ModuleBits and rebuild (ensures the the build name is correct)

     make -r -f MakefileAS Revision
       stamps h.Version (to make sure that a version number change ensures a
       consistent rebuild)


Building under Unix
-------------------

There is only one method for building under Unix. You will need AS v1.30 or
later, built for your Unix, available in your path as as_ro, drlink v0.3.4
or later, built for your Unix, available in your path as link_ro, perl v5,
sed v2.05 and make v3.76.1. Perl is available from http://www.perl.com/; sed
and make are available from http://www.fsf.org/. as_ro can be built from the
source, or we can supply it pre-built for ELF i386 linux; link_ro can
probably be supplied pre-built for ELF i386 linux on request, but we do not
have permission to distribute the source code. (Alternatively, if you have
access to ARM's development kit, you can hack !ZapSource/data/unix/Makefile
to use that instead; you'll need to change the asm, link, asmflags and
linkflags variables in the makefile, near the bottom of the [System]
section.)

The command to run, from within the !Zap directory, is:

  make -f data/unix/Makefile
  
This gives the default build name; you can use:

  make -f data/unix/Makefile BUILD=foo

and:

  make -f data/unix/Makefile BUILD=foo-42

as above.

$Id: BUILD.txt,v 1.1.2.1 1999/08/06 09:22:44 james Exp $
